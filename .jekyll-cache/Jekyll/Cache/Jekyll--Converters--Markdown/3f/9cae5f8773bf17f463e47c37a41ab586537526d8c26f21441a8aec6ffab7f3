I"Ï<p>Acredito que todos os desenvolvedores passam pelo momento Ecommerce (aprendizagem ou mercado), justamente pela gama de servi√ßos hospedados neste segmento atualmente, o que oferece praticidade aos adeptos (de liverys) e consequentemente gera empregos aos entregadores, neste projeto, busquei fazer algo funcional que ampliasse meu conhecimento com components do <code class="language-plaintext highlighter-rouge">React</code>, sendo assim, foquei na utiliza√ß√£o do <code class="language-plaintext highlighter-rouge">styled components</code> e alguns <code class="language-plaintext highlighter-rouge">Hooks</code>, al√©m do contato com o <code class="language-plaintext highlighter-rouge">Redux</code> e <code class="language-plaintext highlighter-rouge">Redux Persist</code>, raz√µes: tokens persistentes para o carrinho de compras‚Ä¶ O resultado realmente me surpreendeu, n√£o costumo implementar em full stack e concluir praticamente todas as etapas de constru√ß√£o, at√© em raz√£o da demanda x tempo, entretanto este projeto me entusiasmou a este ponto. Inclusive, tamb√©m foi implementado uma p√°gina adminastradora ao manager do site, que tamb√©m inclui uma an√°lises (analytics) de vendas em rela√ß√£o aos meses anteriores.</p>

<p>As etapas identidades foram selecionadas na seguinte lista:</p>
<ul>
  <li>M√©todo checkout com o servi√ßo <code class="language-plaintext highlighter-rouge">stripe</code>;</li>
  <li>o carrinho de compras utilizando <code class="language-plaintext highlighter-rouge">redux toolkit</code> e <code class="language-plaintext highlighter-rouge">redux persist</code>;</li>
  <li>P√°gine de gest√£o com querys espec√≠ficas;</li>
</ul>

<p>Em todo ecommerce √© necess√°rio um m√©todo de pagamento, √© o que caracteriza esse servi√ßo. Pensando assim, adotei o <a href="https://stripe.com">Stripe</a> como servi√ßo, acreditando ser um dos mais seguros e com custos interessantes. Para que essa ferramenta funcione corretamente, criei uma conta na p√°gina, o que garantiu as minhas chaves (p√∫blica e secreta), da mesma forma o stripe fornece um c√≥digo para integra√ß√£o do m√©todo checkout. Logo, meu c√≥digo ficou da seguinte forma:</p>

<pre><code class="language-reactJS">import StripeCheckout from 'react-stripe-checkout'
const KEY = process.env.REACT_APP_STRIPE //public key
const [stripeToken, setStripeToken] = useState(null)

const onToken = (token) =&gt; { //pegando o token gerado e atribuindo a variavel  
    setStripeToken(token); 
}

useEffect(()=&gt; { // assim que o token foi gerando 
    const makeRequest = async () =&gt; { //fun√ß√£o de envio ao banco de dados
    const localPrice = cart.total * 100;
    await publicRequest.post("/checkout/payment", { 
        tokenId: stripeToken.id, 
        amount: localPrice,
    }).then((res) =&gt; {
        history("/success", {state:{data:res.data}})  //se tudo deu certo com a compra, redireciona o cliente
        //console.log(res.data)  
    }).catch((err) =&gt; {
        history("/failed", {state:{data:err.response.data}})  //se algo deu errado com cart√£o, imprime o mal sucedido
    })
}
stripeToken &amp;&amp; makeRequest(); //se o token existe chama a fun√ß√£o de envio
}, [stripeToken, cart.total, history])


return ( // importando o m√©todo no meu front 
    &lt;StripeCheckout
        name="Santa Colina" //nome site
        image="https://images.vexels.com/media/users/3/200093/isolated/preview/596f0d8cb733b17268752d044976f102-icone-de-sacola-de-compras.png" //avtar
        billingAddress
        shippingAddress
        description={`TOTAL IS $ ${cart.total}`} 
        amount={cart.total*100}
        token={onToken} //chamando a fun√ß√£o onToken
        stripeKey={KEY} //utilizando a minha public
        &gt;                       
        &lt;Button&gt;BUY NOW&lt;/Button&gt;
    &lt;/StripeCheckout&gt;    
)
</code></pre>

<p>De outra forma, no backend, a implementa√ß√£o do checkout ficou assim&gt;</p>

<p>O fonte deste projeto pode estar sendo acessado neste <a href="https://github.com/jardeleko/ecommerce">reposit√≥rio</a>.</p>

<p><br /></p>

:ET