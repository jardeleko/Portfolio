I"/#<p>Acredito que todos os desenvolvedores passam pelo momento Ecommerce (aprendizagem ou mercado), justamente pela gama de serviços hospedados neste segmento atualmente, o que oferece praticidade aos adeptos (de liverys) e consequentemente gera empregos aos entregadores, neste projeto, busquei fazer algo funcional que ampliasse meu conhecimento com components do <code class="language-plaintext highlighter-rouge">React</code>, sendo assim, foquei na utilização do <code class="language-plaintext highlighter-rouge">styled components</code> e alguns <code class="language-plaintext highlighter-rouge">Hooks</code>, além do contato com o <code class="language-plaintext highlighter-rouge">Redux</code> e <code class="language-plaintext highlighter-rouge">Redux Persist</code>, razões: tokens persistentes para o carrinho de compras… O resultado realmente me surpreendeu, não costumo implementar em full stack e concluir praticamente todas as etapas de construção, até em razão da demanda x tempo, entretanto este projeto me entusiasmou a este ponto. Inclusive, também foi implementado uma página adminastradora ao manager do site, que também inclui uma análises (analytics) de vendas em relação aos meses anteriores.</p>

<p>As etapas identidades foram selecionadas na seguinte lista:</p>
<ul>
  <li>Método checkout com o serviço <code class="language-plaintext highlighter-rouge">stripe</code>;</li>
  <li>o carrinho de compras utilizando <code class="language-plaintext highlighter-rouge">redux toolkit</code> e <code class="language-plaintext highlighter-rouge">redux persist</code>;</li>
  <li>Págine de gestão com querys específicas;</li>
</ul>

<p>Em todo ecommerce é necessário um método de pagamento, é o que caracteriza esse serviço. Pensando assim, adotei o <a href="https://stripe.com">Stripe</a> como serviço, acreditando ser um dos mais seguros e com custos interessantes. Para que essa ferramenta funcione corretamente, criei uma conta na página, o que garantiu as minhas chaves (pública e secreta), da mesma forma o stripe fornece um código para integração do método checkout. Logo, meu código ficou da seguinte forma:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">import</span> <span class="n">StripeCheckout</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="o">-</span><span class="n">stripe</span><span class="o">-</span><span class="n">checkout</span><span class="err">'</span>
<span class="k">const</span> <span class="n">KEY</span> <span class="o">=</span> <span class="n">process</span><span class="p">.</span><span class="n">env</span><span class="p">.</span><span class="n">REACT_APP_STRIPE</span> <span class="c1">//public key</span>
<span class="k">const</span> <span class="p">[</span><span class="n">stripeToken</span><span class="p">,</span> <span class="n">setStripeToken</span><span class="p">]</span> <span class="o">=</span> <span class="n">useState</span><span class="p">(</span><span class="n">null</span><span class="p">)</span>

<span class="k">const</span> <span class="n">onToken</span> <span class="o">=</span> <span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//pegando o token gerado e atribuindo a variavel  </span>
    <span class="n">setStripeToken</span><span class="p">(</span><span class="n">token</span><span class="p">);</span> 
<span class="p">}</span>

<span class="n">useEffect</span><span class="p">(()</span><span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// assim que o token foi gerando </span>
    <span class="k">const</span> <span class="n">makeRequest</span> <span class="o">=</span> <span class="n">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//função de envio ao banco de dados</span>
    <span class="k">const</span> <span class="n">localPrice</span> <span class="o">=</span> <span class="n">cart</span><span class="p">.</span><span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">;</span>
    <span class="n">await</span> <span class="n">publicRequest</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s">"/checkout/payment"</span><span class="p">,</span> <span class="p">{</span> 
        <span class="nl">tokenId:</span> <span class="n">stripeToken</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> 
        <span class="nl">amount:</span> <span class="n">localPrice</span><span class="p">,</span>
    <span class="p">}).</span><span class="n">then</span><span class="p">((</span><span class="n">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="n">history</span><span class="p">(</span><span class="s">"/success"</span><span class="p">,</span> <span class="p">{</span><span class="n">state</span><span class="o">:</span><span class="p">{</span><span class="n">data</span><span class="o">:</span><span class="n">res</span><span class="p">.</span><span class="n">data</span><span class="p">}})</span>  <span class="c1">//se tudo deu certo com a compra, redireciona o cliente</span>
        <span class="c1">//console.log(res.data)  </span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="n">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="n">history</span><span class="p">(</span><span class="s">"/failed"</span><span class="p">,</span> <span class="p">{</span><span class="n">state</span><span class="o">:</span><span class="p">{</span><span class="n">data</span><span class="o">:</span><span class="n">err</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">}})</span>  <span class="c1">//se algo deu errado com cartão, imprime o mal sucedido</span>
    <span class="p">})</span>
<span class="p">}</span>
<span class="n">stripeToken</span> <span class="o">&amp;&amp;</span> <span class="n">makeRequest</span><span class="p">();</span> <span class="c1">//se o token existe chama a função de envio</span>
<span class="p">},</span> <span class="p">[</span><span class="n">stripeToken</span><span class="p">,</span> <span class="n">cart</span><span class="p">.</span><span class="n">total</span><span class="p">,</span> <span class="n">history</span><span class="p">])</span>


<span class="k">return</span> <span class="p">(</span> <span class="c1">// importando o método no meu front </span>
    <span class="o">&lt;</span><span class="n">StripeCheckout</span>
        <span class="n">name</span><span class="o">=</span><span class="s">"Santa Colina"</span> <span class="c1">//nome site</span>
        <span class="n">image</span><span class="o">=</span><span class="s">"https://images.vexels.com/media/users/3/200093/isolated/preview/596f0d8cb733b17268752d044976f102-icone-de-sacola-de-compras.png"</span> <span class="c1">//avtar</span>
        <span class="n">billingAddress</span>
        <span class="n">shippingAddress</span>
        <span class="n">description</span><span class="o">=</span><span class="p">{</span><span class="err">`</span><span class="n">TOTAL</span> <span class="n">IS</span> <span class="err">$</span> <span class="err">$</span><span class="p">{</span><span class="n">cart</span><span class="p">.</span><span class="n">total</span><span class="p">}</span><span class="err">`</span><span class="p">}</span> 
        <span class="n">amount</span><span class="o">=</span><span class="p">{</span><span class="n">cart</span><span class="p">.</span><span class="n">total</span><span class="o">*</span><span class="mi">100</span><span class="p">}</span>
        <span class="n">token</span><span class="o">=</span><span class="p">{</span><span class="n">onToken</span><span class="p">}</span> <span class="c1">//chamando a função onToken</span>
        <span class="n">stripeKey</span><span class="o">=</span><span class="p">{</span><span class="n">KEY</span><span class="p">}</span> <span class="c1">//utilizando a minha public</span>
        <span class="o">&gt;</span>                       
        <span class="o">&lt;</span><span class="n">Button</span><span class="o">&gt;</span><span class="n">BUY</span> <span class="n">NOW</span><span class="o">&lt;/</span><span class="n">Button</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="n">StripeCheckout</span><span class="o">&gt;</span>    
<span class="p">)</span>
</code></pre></div></div>

<p>De outra forma, no backend, a implementação do checkout ficou assim&gt;</p>

<p>O fonte deste projeto pode estar sendo acessado neste <a href="https://github.com/jardeleko/ecommerce">repositório</a>.</p>

<p><br /></p>

:ET