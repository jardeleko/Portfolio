I"®#<p>Acredito que todos os desenvolvedores passam pelo momento Ecommerce (aprendizagem ou mercado), justamente pela gama de servi√ßos hospedados neste segmento atualmente, o que oferece praticidade aos adeptos (de liverys) e consequentemente gera empregos aos entregadores, neste projeto, busquei fazer algo funcional que ampliasse meu conhecimento com components do <code class="language-plaintext highlighter-rouge">React</code>, sendo assim, foquei na utiliza√ß√£o do <code class="language-plaintext highlighter-rouge">styled components</code> e alguns <code class="language-plaintext highlighter-rouge">Hooks</code>, al√©m do contato com o <code class="language-plaintext highlighter-rouge">Redux</code> e <code class="language-plaintext highlighter-rouge">Redux Persist</code>, raz√µes: tokens persistentes para o carrinho de compras‚Ä¶ O resultado realmente me surpreendeu, n√£o costumo implementar em full stack e concluir praticamente todas as etapas de constru√ß√£o, at√© em raz√£o da demanda x tempo, entretanto este projeto me entusiasmou a este ponto. Inclusive, tamb√©m foi implementado uma p√°gina adminastradora ao manager do site, que tamb√©m inclui uma an√°lises (analytics) de vendas em rela√ß√£o aos meses anteriores.</p>

<p>As etapas identidades foram selecionadas na seguinte lista:</p>
<ul>
  <li>M√©todo checkout com o servi√ßo <code class="language-plaintext highlighter-rouge">stripe</code>;</li>
  <li>o carrinho de compras utilizando <code class="language-plaintext highlighter-rouge">redux toolkit</code> e <code class="language-plaintext highlighter-rouge">redux persist</code>;</li>
  <li>P√°gine de gest√£o com querys espec√≠ficas;</li>
</ul>

<p>Em todo ecommerce √© necess√°rio um m√©todo de pagamento, √© o que caracteriza esse servi√ßo. Pensando assim, adotei o <a href="https://stripe.com">Stripe</a> como servi√ßo, acreditando ser um dos mais seguros e com custos interessantes. Para que essa ferramenta funcione corretamente, criei uma conta na p√°gina, o que garantiu as minhas chaves (p√∫blica e secreta), da mesma forma o stripe fornece um c√≥digo para integra√ß√£o do m√©todo checkout. Logo, meu c√≥digo ficou da seguinte forma:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">StripeCheckout</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-stripe-checkout</span><span class="dl">'</span>
<span class="kd">const</span> <span class="nx">KEY</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REACT_APP_STRIPE</span> <span class="c1">//public key</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">stripeToken</span><span class="p">,</span> <span class="nx">setStripeToken</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">onToken</span> <span class="o">=</span> <span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//pegando o token gerado e atribuindo a variavel  </span>
    <span class="nx">setStripeToken</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span> 
<span class="p">}</span>

<span class="nx">useEffect</span><span class="p">(()</span><span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// assim que o token foi gerando </span>
    <span class="kd">const</span> <span class="nx">makeRequest</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//fun√ß√£o de envio ao banco de dados</span>
    <span class="kd">const</span> <span class="nx">localPrice</span> <span class="o">=</span> <span class="nx">cart</span><span class="p">.</span><span class="nx">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">;</span>
    <span class="k">await</span> <span class="nx">publicRequest</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/checkout/payment</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> 
        <span class="na">tokenId</span><span class="p">:</span> <span class="nx">stripeToken</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> 
        <span class="na">amount</span><span class="p">:</span> <span class="nx">localPrice</span><span class="p">,</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">history</span><span class="p">(</span><span class="dl">"</span><span class="s2">/success</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span><span class="na">state</span><span class="p">:{</span><span class="na">data</span><span class="p">:</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">}})</span>  <span class="c1">//se tudo deu certo com a compra, redireciona o cliente</span>
        <span class="c1">//console.log(res.data)  </span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">history</span><span class="p">(</span><span class="dl">"</span><span class="s2">/failed</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span><span class="na">state</span><span class="p">:{</span><span class="na">data</span><span class="p">:</span><span class="nx">err</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">}})</span>  <span class="c1">//se algo deu errado com cart√£o, imprime o mal sucedido</span>
    <span class="p">})</span>
<span class="p">}</span>
<span class="nx">stripeToken</span> <span class="o">&amp;&amp;</span> <span class="nx">makeRequest</span><span class="p">();</span> <span class="c1">//se o token existe chama a fun√ß√£o de envio</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">stripeToken</span><span class="p">,</span> <span class="nx">cart</span><span class="p">.</span><span class="nx">total</span><span class="p">,</span> <span class="nx">history</span><span class="p">])</span>


<span class="k">return</span> <span class="p">(</span> <span class="c1">// importando o m√©todo no meu front </span>
    <span class="o">&lt;</span><span class="nx">StripeCheckout</span>
        <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Santa Colina</span><span class="dl">"</span> <span class="c1">//nome site</span>
        <span class="nx">image</span><span class="o">=</span><span class="dl">"</span><span class="s2">https://images.vexels.com/media/users/3/200093/isolated/preview/596f0d8cb733b17268752d044976f102-icone-de-sacola-de-compras.png</span><span class="dl">"</span> <span class="c1">//avtar</span>
        <span class="nx">billingAddress</span>
        <span class="nx">shippingAddress</span>
        <span class="nx">description</span><span class="o">=</span><span class="p">{</span><span class="s2">`TOTAL IS $ </span><span class="p">${</span><span class="nx">cart</span><span class="p">.</span><span class="nx">total</span><span class="p">}</span><span class="s2">`</span><span class="p">}</span> 
        <span class="nx">amount</span><span class="o">=</span><span class="p">{</span><span class="nx">cart</span><span class="p">.</span><span class="nx">total</span><span class="o">*</span><span class="mi">100</span><span class="p">}</span>
        <span class="nx">token</span><span class="o">=</span><span class="p">{</span><span class="nx">onToken</span><span class="p">}</span> <span class="c1">//chamando a fun√ß√£o onToken</span>
        <span class="nx">stripeKey</span><span class="o">=</span><span class="p">{</span><span class="nx">KEY</span><span class="p">}</span> <span class="c1">//utilizando a minha public</span>
        <span class="o">&gt;</span>                       
        <span class="o">&lt;</span><span class="nx">Button</span><span class="o">&gt;</span><span class="nx">BUY</span> <span class="nx">NOW</span><span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/StripeCheckout</span><span class="err">&gt;
</span><span class="p">)</span>
</code></pre></div></div>

<p>De outra forma, no backend, a implementa√ß√£o do checkout ficou assim&gt;</p>

<p>O fonte deste projeto pode estar sendo acessado neste <a href="https://github.com/jardeleko/ecommerce">reposit√≥rio</a>.</p>

<p><br /></p>

:ET