I"æ4<p>O trabalho consistiu na cria√ß√£o de uma p√°gina est√°tica para ofertar vagas de garagem, onde o desenvolvimento baseou-se em um template simples, utlizando de <code class="language-plaintext highlighter-rouge">React</code> e posteriormente hospedado no estimado <code class="language-plaintext highlighter-rouge">Vercel</code>.</p>

<p>Enfim, justamente por ser um site pr√≥prio e ter certa empatia com o cliente, pude fazer algo simples e funcional, sem a necessidade de incluir milhares de linhas e p√°ginas sem serventia, considero que vivemos √©pocas midi√°tricas (foto, videos, gifs, etc) para qualquer p√∫blico, ent√£o, o simples informativo j√° atinge determinado alcance e isso bastava.</p>

<p>Para cria√ß√£o do site,</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./files.json</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">tmp</span><span class="p">;</span> 
<span class="kd">let</span> <span class="nx">conn</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">runTransaction</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">connect</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">createTable</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">execute</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">showRows</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//Connect to database with postgres user and pass</span>
<span class="kd">function</span> <span class="nx">connect</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">today</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">pg</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">conn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">({</span>
    <span class="na">host</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">HOST_HOMEUP</span><span class="p">,</span>
    <span class="na">database</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DB_HOMEUP</span><span class="p">,</span>
    <span class="na">user</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">USER_HOMEUP</span><span class="p">,</span>
    <span class="na">password</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PASSWD_HOMEUP</span><span class="p">,</span>
    <span class="c1">// port: 5432,</span>
  <span class="p">});</span>
  <span class="nx">conn</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">createTable</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">`
      drop table if exists tuss_tables;
      create table if not exists tuss(
        code integer,
        proccess varchar,
        primary key (code)
      )
  `</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Table created in postgresql</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">execute</span><span class="p">(){</span>
  <span class="nx">today</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">values</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
      <span class="na">code</span><span class="p">:</span> <span class="nx">s</span><span class="p">.</span><span class="nx">codigo</span><span class="p">,</span>
      <span class="na">proccess</span><span class="p">:</span> <span class="nx">s</span><span class="p">.</span><span class="nx">procedimento</span><span class="p">,</span>
    <span class="p">}))</span>

    <span class="k">await</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">"</span><span class="s2">BEGIN</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">values</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
      <span class="c1">//Declare string for sql statement</span>
        <span class="kd">const</span> <span class="nx">sqlString</span> <span class="o">=</span> <span class="s2">`INSERT INTO tuss_tables (code, proccess) VALUES ($1, $2);`</span><span class="p">;</span>
          <span class="c1">//Pass sql string to the query method</span>
        <span class="kd">let</span> <span class="nx">aux</span> <span class="o">=</span> <span class="p">[</span><span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">code</span><span class="p">,</span> <span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">proccess</span><span class="p">]</span>
        <span class="k">await</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="nx">sqlString</span><span class="p">,</span> <span class="nx">aux</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">client.query() SQL result:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">client.query():</span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
          <span class="c1">//Rollback before executing another transaction</span>
          <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">"</span><span class="s2">ROLLBACK</span><span class="dl">"</span><span class="p">);</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Transaction ROLLBACK called</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">"</span><span class="s2">COMMIT</span><span class="dl">"</span><span class="p">);</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">client.query() COMMIT row count:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">rowCount</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">});</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Rollback before executing another transaction</span>
        <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">"</span><span class="s2">ROLLBACK</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">client.query():</span><span class="dl">"</span><span class="p">,</span> <span class="nx">er</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Transaction ROLLBACK called</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="nx">i</span><span class="o">++</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Tuss released</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//Print all rows in console</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">showRows</span><span class="p">()</span> <span class="p">{</span>

  <span class="kd">let</span> <span class="p">{</span> <span class="nx">rows</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span>
    <span class="s2">`SELECT * FROM tuss_tables;`</span>
  <span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">row</span> <span class="k">of</span> <span class="nx">rows</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">-</span> <span class="nx">today</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">Was inserted </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> rows in </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">tmp</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> ms(t)</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">//Kill process in node, go back terminal</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">runTransaction</span><span class="p">();</span>

</code></pre></div></div>

<p>O fonte deste projeto pode estar sendo acessado neste <a href="https://github.com/jardeleko/class-2020-extras/blob/main/BD2/TP_01/transaction_db.js">reposit√≥rio</a>, entretanto, o caso de uso busca an√°lisar o desempenho do pr√≥prio Postgres em rela√ß√£o a inser√ß√£o de 100k tuplas.</p>

<p><br /></p>

<!-- [Stripe]: https://stripe.com -->
:ET