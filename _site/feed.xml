<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/portfolio/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/portfolio/" rel="alternate" type="text/html" /><updated>2022-10-27T02:27:02-03:00</updated><id>http://localhost:4000/portfolio/feed.xml</id><title type="html">Jardel Osorio Duarte</title><subtitle>Página destinada a expor alguns projetos e ferramentas qual já tenho certa familiaridade.  Inclúindo: curriculum lattes, publicações relacionadas a minha linha de pesquisa e áreas de interesse.</subtitle><entry><title type="html">Transactions com Node js e Postgresql</title><link href="http://localhost:4000/portfolio/transaction-nodejs" rel="alternate" type="text/html" title="Transactions com Node js e Postgresql" /><published>2022-10-27T01:14:06-03:00</published><updated>2022-10-27T01:14:06-03:00</updated><id>http://localhost:4000/portfolio/transaction-nodejs</id><content type="html" xml:base="http://localhost:4000/portfolio/transaction-nodejs"><![CDATA[<p>Simples de população de um banco de dados <code class="language-plaintext highlighter-rouge">Postgres</code>, cenário foi criado para inclusão da tabela Tuss em uma clinica médica, o desenvolvimento deu-se em <code class="language-plaintext highlighter-rouge">node js</code> por consequência de já ter um escopo do projeto predefinido em BD2 durante a graduação. Embora não seja algo absurdamente complexo para outras linguagens, em node confesso ter certa simplicidade, inclusive, indica-se para um bom desempenho na construção deste serviço a adoção de linguaguens como <code class="language-plaintext highlighter-rouge">C</code> ou <code class="language-plaintext highlighter-rouge">Python</code>.</p>

<p>O caso consistiu em diversas etapas divertidas, como por exemplo a elaboração de um evento local, antes do lançamento na <code class="language-plaintext highlighter-rouge">Cloud</code>, unicamente para garantir a integridade. Além da sanitização do lista que pode ser encontrada em <a href="https://github.com/charlesfgarcia/tabelas-ans">Tuss</a>.</p>

<p>Enfim, o código também serviu e/ou serve para demais consultas em serviços hospedados, e por isso, decidi publicar no portfólio buscando reforçar minha satisfação com este caso específico.</p>

<p>Abaixo as poucas linhas de códigos que me satisfizeram como entusiasta de <code class="language-plaintext highlighter-rouge">SGBDs</code>, em principal Postgresql, adotado em grande parte do curso, tks <code class="language-plaintext highlighter-rouge">UFFS</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./files.json</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">tmp</span><span class="p">;</span> 
<span class="kd">let</span> <span class="nx">conn</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">runTransaction</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">connect</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">createTable</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">execute</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">showRows</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//Connect to database with postgres user and pass</span>
<span class="kd">function</span> <span class="nx">connect</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">today</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">pg</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">conn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">({</span>
    <span class="na">host</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">HOST_HOMEUP</span><span class="p">,</span>
    <span class="na">database</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DB_HOMEUP</span><span class="p">,</span>
    <span class="na">user</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">USER_HOMEUP</span><span class="p">,</span>
    <span class="na">password</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PASSWD_HOMEUP</span><span class="p">,</span>
    <span class="c1">// port: 5432,</span>
  <span class="p">});</span>
  <span class="nx">conn</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">createTable</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">`
      drop table if exists tuss_tables;
      create table if not exists tuss(
        code integer,
        proccess varchar,
        primary key (code)
      )
  `</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Table created in postgresql</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">execute</span><span class="p">(){</span>
  <span class="nx">today</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">values</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
      <span class="na">code</span><span class="p">:</span> <span class="nx">s</span><span class="p">.</span><span class="nx">codigo</span><span class="p">,</span>
      <span class="na">proccess</span><span class="p">:</span> <span class="nx">s</span><span class="p">.</span><span class="nx">procedimento</span><span class="p">,</span>
    <span class="p">}))</span>

    <span class="k">await</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">"</span><span class="s2">BEGIN</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">values</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
      <span class="c1">//Declare string for sql statement</span>
        <span class="kd">const</span> <span class="nx">sqlString</span> <span class="o">=</span> <span class="s2">`INSERT INTO tuss_tables (code, proccess) VALUES ($1, $2);`</span><span class="p">;</span>
          <span class="c1">//Pass sql string to the query method</span>
        <span class="kd">let</span> <span class="nx">aux</span> <span class="o">=</span> <span class="p">[</span><span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">code</span><span class="p">,</span> <span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">proccess</span><span class="p">]</span>
        <span class="k">await</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="nx">sqlString</span><span class="p">,</span> <span class="nx">aux</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">client.query() SQL result:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">client.query():</span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
          <span class="c1">//Rollback before executing another transaction</span>
          <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">"</span><span class="s2">ROLLBACK</span><span class="dl">"</span><span class="p">);</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Transaction ROLLBACK called</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">"</span><span class="s2">COMMIT</span><span class="dl">"</span><span class="p">);</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">client.query() COMMIT row count:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">rowCount</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">});</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//Rollback before executing another transaction</span>
        <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">"</span><span class="s2">ROLLBACK</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">client.query():</span><span class="dl">"</span><span class="p">,</span> <span class="nx">er</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Transaction ROLLBACK called</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="nx">i</span><span class="o">++</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Tuss released</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//Print all rows in console</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">showRows</span><span class="p">()</span> <span class="p">{</span>

  <span class="kd">let</span> <span class="p">{</span> <span class="nx">rows</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span>
    <span class="s2">`SELECT * FROM tuss_tables;`</span>
  <span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">row</span> <span class="k">of</span> <span class="nx">rows</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">-</span> <span class="nx">today</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">Was inserted </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> rows in </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">tmp</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> ms(t)</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">//Kill process in node, go back terminal</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">runTransaction</span><span class="p">();</span>

</code></pre></div></div>

<p>O fonte deste projeto pode estar sendo acessado neste <a href="https://github.com/jardeleko/class-2020-extras/blob/main/BD2/TP_01/transaction_db.js">repositório</a>, entretanto, o caso de uso busca análisar o desempenho do próprio Postgres em relação a inserção de 100k tuplas.</p>

<p><br /></p>

<!-- [Stripe]: https://stripe.com -->]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Simples de população de um banco de dados Postgres, cenário foi criado para inclusão da tabela Tuss em uma clinica médica, o desenvolvimento deu-se em node js por consequência de já ter um escopo do projeto predefinido em BD2 durante a graduação. Embora não seja algo absurdamente complexo para outras linguagens, em node confesso ter certa simplicidade, inclusive, indica-se para um bom desempenho na construção deste serviço a adoção de linguaguens como C ou Python.]]></summary></entry><entry><title type="html">Projeto Web Ecommerce-SC</title><link href="http://localhost:4000/portfolio/react-web" rel="alternate" type="text/html" title="Projeto Web Ecommerce-SC" /><published>2022-09-01T20:24:06-03:00</published><updated>2022-09-01T20:24:06-03:00</updated><id>http://localhost:4000/portfolio/react-web</id><content type="html" xml:base="http://localhost:4000/portfolio/react-web"><![CDATA[<p>Acredito que todos os desenvolvedores passam pelo momento Ecommerce (aprendizagem ou mercado), justamente pela gama de serviços hospedados neste segmento atualmente, o que oferece praticidade aos adeptos (deliverys) e consequentemente gera empregos aos entregadores, neste projeto, busquei fazer algo funcional que ampliasse meu conhecimento com components do <code class="language-plaintext highlighter-rouge">React</code>, sendo assim, foquei na utilização do <code class="language-plaintext highlighter-rouge">styled components</code> e alguns <code class="language-plaintext highlighter-rouge">Hooks</code>, além do contato com o <code class="language-plaintext highlighter-rouge">Redux</code> e <code class="language-plaintext highlighter-rouge">Redux Persist</code>, razões: tokens persistentes para o carrinho de compras… O resultado realmente me surpreendeu, não costumo implementar full stack e concluir praticamente todas as etapas de construção, até em razão da demanda x tempo, entretanto este projeto me entusiasmou a este ponto. Inclusive, também foi implementado uma página administradora ao manager do site, que também inclui análises (analytics) de vendas em relação aos meses anteriores.</p>

<p>As etapas identidades foram selecionadas na seguinte lista:</p>
<ul>
  <li>Método checkout com o serviço <code class="language-plaintext highlighter-rouge">stripe</code>;</li>
  <li>o carrinho de compras utilizando <code class="language-plaintext highlighter-rouge">redux toolkit</code> e <code class="language-plaintext highlighter-rouge">redux persist</code>;</li>
  <li>Página de gestão com querys específicas;</li>
</ul>

<p>Em todo ecommerce é necessário um método de pagamento, é o que caracteriza esse serviço. Pensando assim, adotei o <a href="https://stripe.com">Stripe</a> como serviço, acreditando ser um dos mais seguros e com custos interessantes. Para que essa ferramenta funcione corretamente, criei uma conta na página, o que garantiu as minhas chaves (pública e secreta), da mesma forma o stripe fornece um código para integração do método checkout. Logo, meu código ficou da seguinte forma:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">StripeCheckout</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-stripe-checkout</span><span class="dl">'</span>
<span class="kd">const</span> <span class="nx">KEY</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REACT_APP_STRIPE</span> <span class="c1">//public key</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">stripeToken</span><span class="p">,</span> <span class="nx">setStripeToken</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">onToken</span> <span class="o">=</span> <span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//pegando o token gerado e atribuindo a variavel  </span>
    <span class="nx">setStripeToken</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span> 
<span class="p">}</span>

<span class="nx">useEffect</span><span class="p">(()</span><span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// assim que o token foi gerando </span>
    <span class="kd">const</span> <span class="nx">makeRequest</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//função de envio ao banco de dados</span>
    <span class="kd">const</span> <span class="nx">localPrice</span> <span class="o">=</span> <span class="nx">cart</span><span class="p">.</span><span class="nx">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">;</span>
    <span class="k">await</span> <span class="nx">publicRequest</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/checkout/payment</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> 
        <span class="na">tokenId</span><span class="p">:</span> <span class="nx">stripeToken</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> 
        <span class="na">amount</span><span class="p">:</span> <span class="nx">localPrice</span><span class="p">,</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">history</span><span class="p">(</span><span class="dl">"</span><span class="s2">/success</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span><span class="na">state</span><span class="p">:{</span><span class="na">data</span><span class="p">:</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">}})</span>  <span class="c1">//se tudo deu certo com a compra, redireciona o cliente</span>
        <span class="c1">//console.log(res.data)  </span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">history</span><span class="p">(</span><span class="dl">"</span><span class="s2">/failed</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span><span class="na">state</span><span class="p">:{</span><span class="na">data</span><span class="p">:</span><span class="nx">err</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">}})</span>  <span class="c1">//se algo deu errado com cartão, imprime o mal sucedido</span>
    <span class="p">})</span>
<span class="p">}</span>
<span class="nx">stripeToken</span> <span class="o">&amp;&amp;</span> <span class="nx">makeRequest</span><span class="p">();</span> <span class="c1">//se o token existe chama a função de envio</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">stripeToken</span><span class="p">,</span> <span class="nx">cart</span><span class="p">.</span><span class="nx">total</span><span class="p">,</span> <span class="nx">history</span><span class="p">])</span>


<span class="k">return</span> <span class="p">(</span> <span class="c1">// importando o método no meu front </span>
    <span class="o">&lt;</span><span class="nx">StripeCheckout</span>
        <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Santa Colina</span><span class="dl">"</span> <span class="c1">//nome site</span>
        <span class="nx">image</span><span class="o">=</span><span class="dl">"</span><span class="s2">https://images.vexels.com/media/users/3/200093/isolated/preview/596f0d8cb733b17268752d044976f102-icone-de-sacola-de-compras.png</span><span class="dl">"</span> <span class="c1">//avtar</span>
        <span class="nx">billingAddress</span>
        <span class="nx">shippingAddress</span>
        <span class="nx">description</span><span class="o">=</span><span class="p">{</span><span class="s2">`TOTAL IS $ </span><span class="p">${</span><span class="nx">cart</span><span class="p">.</span><span class="nx">total</span><span class="p">}</span><span class="s2">`</span><span class="p">}</span> 
        <span class="nx">amount</span><span class="o">=</span><span class="p">{</span><span class="nx">cart</span><span class="p">.</span><span class="nx">total</span><span class="o">*</span><span class="mi">100</span><span class="p">}</span>
        <span class="nx">token</span><span class="o">=</span><span class="p">{</span><span class="nx">onToken</span><span class="p">}</span> <span class="c1">//chamando a função onToken</span>
        <span class="nx">stripeKey</span><span class="o">=</span><span class="p">{</span><span class="nx">KEY</span><span class="p">}</span> <span class="c1">//utilizando a minha public</span>
        <span class="o">&gt;</span>                       
        <span class="o">&lt;</span><span class="nx">Button</span><span class="o">&gt;</span><span class="nx">BUY</span> <span class="nx">NOW</span><span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/StripeCheckout</span><span class="err">&gt;
</span><span class="p">)</span>
</code></pre></div></div>

<p>De outra forma, no backend, a implementação da rota payment ficou assim:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">).</span><span class="nx">config</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">).</span><span class="nx">Router</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">stripe</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">stripe</span><span class="dl">'</span><span class="p">)(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">STRIPE_KEY</span><span class="p">)</span> <span class="c1">//secret </span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/payment</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> 

<span class="nx">stripe</span><span class="p">.</span><span class="nx">charges</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="c1">//utilizando o método charges para conectar com o serviço na página</span>
    <span class="na">source</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">tokenId</span><span class="p">,</span>
    <span class="na">amount</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">amount</span><span class="p">,</span>
    <span class="na">currency</span><span class="p">:</span> <span class="dl">"</span><span class="s2">brl</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//identificando a moéda corrente usd/ eur/ neste caso brl </span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">stripeRes</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">stripeRes</span><span class="p">)</span>  <span class="c1">//se a resposta for ok, os dados estão aceito</span>

    <span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">stripeError</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stripeError</span><span class="p">)</span> <span class="c1">//caso houver erro no pagamento</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">stripeError</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">})</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</code></pre></div></div>

<p>Para construir o carrinho de compras, é fundamental que a responsividade ocorra, principalmente quando existe alteração na quantidade de itens ou na persistência dos itens, ou seja, quando o cliente sair da página os itens devem permanecer no carrinho. Para isso utilizei o <code class="language-plaintext highlighter-rouge">redux</code>, que atualizava as incrementações no frontend quando cada função era acionada. Sendo assim, a implementação consistiu em mais de um arquivo no fonte e está melhor detalhada no código abaixo:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//page product </span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">addProduct</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../redux/cartRedux</span><span class="dl">'</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">quantity</span><span class="p">,</span> <span class="nx">setQuantity</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">handleQuantity</span> <span class="o">=</span> <span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//função que verifica, incrementa or decrementa </span>
    <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">dec</span><span class="dl">'</span><span class="p">){</span>
        <span class="nx">setQuantity</span><span class="p">(</span><span class="nx">quantity</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="c1">//se remove decrementa</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">quantity</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">setQuantity</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nx">setQuantity</span><span class="p">(</span><span class="nx">quantity</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="c1">//se add incrementa</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//se foi clicado para enviar ao carrinho</span>
    <span class="k">await</span> <span class="nx">userRequest</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/cart</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="c1">//rota para criar um carrinho gerado ao banco de dados, independente de o cliente finalizar ou nao a compra, aqui temos dados para depois lançar promoçoes ou avisos ao cliente </span>
    <span class="na">userId</span><span class="p">:</span> <span class="nx">currentUser</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> 
    <span class="na">products</span><span class="p">:</span> <span class="p">{</span><span class="na">productId</span><span class="p">:</span><span class="nx">id</span><span class="p">,</span> <span class="na">quantity</span><span class="p">:</span><span class="nx">quantity</span><span class="p">},</span>    
    <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">_idCart</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">_id</span>
        <span class="nx">dispatch</span><span class="p">(</span><span class="nx">addProduct</span><span class="p">({</span><span class="nx">_idCart</span><span class="p">,</span> <span class="p">...</span><span class="nx">product</span><span class="p">,</span> <span class="nx">quantity</span><span class="p">,</span> <span class="nx">color</span><span class="p">,</span> <span class="nx">size</span><span class="p">}),</span> <span class="nx">history</span><span class="p">(</span><span class="dl">"</span><span class="s2">/cart</span><span class="dl">"</span><span class="p">));</span> <span class="c1">//o dispatch para o redux acontece aqui, logo apos a linha ter sido adicionada ao banco de dados </span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">this error </span><span class="dl">"</span><span class="o">+</span> <span class="nx">err</span><span class="p">)</span>
    <span class="p">})</span> 

<span class="p">}</span>

<span class="o">&lt;</span><span class="nx">AmountContainer</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">Remove</span> <span class="nx">cursor</span><span class="o">=</span><span class="dl">"</span><span class="s2">pointer</span><span class="dl">"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span><span class="o">=&gt;</span><span class="nx">handleQuantity</span><span class="p">(</span><span class="dl">"</span><span class="s2">dec</span><span class="dl">"</span><span class="p">)}</span><span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">Amount</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">quantity</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Amount</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">Add</span> <span class="nx">cursor</span><span class="o">=</span><span class="dl">"</span><span class="s2">pointer</span><span class="dl">"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span><span class="o">=&gt;</span><span class="nx">handleQuantity</span><span class="p">(</span><span class="dl">"</span><span class="s2">inc</span><span class="dl">"</span><span class="p">)}</span><span class="sr">/</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/AmountContainer</span><span class="err">&gt;
</span>
</code></pre></div></div>

<p>A página cartRedux:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">createSlice</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@reduxjs/toolkit</span><span class="dl">"</span> <span class="c1">//utilizando a lib toolkit para criar o slice</span>
<span class="k">import</span> <span class="nx">storage</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux-persist/lib/storage</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">cartSlice</span> <span class="o">=</span> <span class="nx">createSlice</span><span class="p">({</span> <span class="c1">//minhas variaveis de estado no meu slice</span>
    <span class="na">name</span><span class="p">:</span><span class="dl">"</span><span class="s2">cart</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">initialState</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">products</span><span class="p">:[],</span>
        <span class="na">quantity</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span>
        <span class="na">total</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">reducers</span><span class="p">:{</span> <span class="c1">//eis os meus reducers, quando adicionar, ou remover</span>
        <span class="na">addProduct</span><span class="p">:(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span><span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">)</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">total</span> <span class="o">+=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">price</span> <span class="o">*</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">quantity</span>
        <span class="p">},</span>
        <span class="na">resetSkill</span><span class="p">:(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//esta função eu criei para limpar o carrinho</span>
            <span class="nx">storage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">)</span> <span class="c1">//removendo o persist para limpar de verdade o carrinho</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">products</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="p">},</span>
        <span class="na">removeProduct</span><span class="p">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//remove o produto clicado, confesso que essa função me tomou tempo</span>
            <span class="kd">const</span> <span class="p">{</span><span class="nx">product</span><span class="p">}</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span>
            <span class="kd">let</span> <span class="nx">lexval</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">quantity</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">product</span><span class="p">.</span><span class="nx">_idCart</span> <span class="o">===</span> <span class="nx">state</span><span class="p">.</span><span class="nx">products</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">_idCart</span><span class="p">){</span>
                    <span class="nx">lexval</span> <span class="o">=</span> <span class="nx">i</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="kd">let</span> <span class="nx">decrement</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">price</span> <span class="o">*</span> <span class="nx">product</span><span class="p">.</span><span class="nx">quantity</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">lexval</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">products</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">state</span><span class="p">.</span><span class="nx">products</span><span class="p">]</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">state</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="nx">state</span><span class="p">.</span><span class="nx">total</span> <span class="o">-=</span> <span class="nx">decrement</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">total</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">state</span><span class="p">.</span><span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="p">}</span>
    <span class="p">},</span>
<span class="p">});</span>

<span class="k">export</span> <span class="kd">const</span> <span class="p">{</span> <span class="nx">addProduct</span><span class="p">,</span> <span class="nx">resetSkill</span><span class="p">,</span> <span class="nx">removeProduct</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">cartSlice</span><span class="p">.</span><span class="nx">actions</span><span class="p">;</span> <span class="c1">//exportando para adicionar na Product.jsx</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">cartSlice</span><span class="p">.</span><span class="nx">reducer</span><span class="p">;</span>
</code></pre></div></div>

<p>Entretanto, para que essas variáveis e funções sejam úteis, é fundamental a criação de um <code class="language-plaintext highlighter-rouge">store</code>, onde o persistor vai ser iniciado, como mostra o fonte abaixo:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">configureStore</span><span class="p">,</span> <span class="nx">combineReducers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@reduxjs/toolkit</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">cartReducer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./cartRedux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">userReducer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./userRedux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
    <span class="nx">persistStore</span><span class="p">,</span>
    <span class="nx">persistReducer</span><span class="p">,</span>
    <span class="nx">FLUSH</span><span class="p">,</span>
    <span class="nx">REHYDRATE</span><span class="p">,</span>
    <span class="nx">PAUSE</span><span class="p">,</span>
    <span class="nx">PERSIST</span><span class="p">,</span>
    <span class="nx">PURGE</span><span class="p">,</span>
    <span class="nx">REGISTER</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux-persist</span><span class="dl">'</span><span class="p">;</span> <span class="c1">//funções nativas do persist</span>
<span class="k">import</span> <span class="nx">storage</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux-persist/lib/storage</span><span class="dl">'</span><span class="p">;</span> <span class="c1">//o storage deve ser iniciado para acessar a raiz em casos especificos, por exemplo: limpar carrinho.</span>

<span class="kd">const</span> <span class="nx">persistConfig</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">,</span> <span class="c1">//variavel raiz que acessei anteriormente no cartRedux</span>
    <span class="na">version</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nx">storage</span><span class="p">,</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">rootReducer</span> <span class="o">=</span> <span class="nx">combineReducers</span><span class="p">({</span> <span class="na">user</span><span class="p">:</span> <span class="nx">userReducer</span><span class="p">,</span> <span class="na">cart</span><span class="p">:</span> <span class="nx">cartReducer</span> <span class="p">});</span> <span class="c1">//como foi iniciado o cart e o user é fundamental que o combineReducers aconteça, outra função nativa que achei legal</span>
<span class="kd">const</span> <span class="nx">persistedReducer</span> <span class="o">=</span> <span class="nx">persistReducer</span><span class="p">(</span><span class="nx">persistConfig</span><span class="p">,</span> <span class="nx">rootReducer</span><span class="p">);</span> <span class="c1">//subindo o persist com as configs </span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">configureStore</span><span class="p">({</span> <span class="c1">// o store que sera importado na main, neste caso index.js</span>
    <span class="na">reducer</span><span class="p">:</span> <span class="nx">persistedReducer</span><span class="p">,</span> <span class="c1">//definindo os reducers</span>
    <span class="na">middleware</span><span class="p">:(</span><span class="nx">getDefaultMiddleware</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">getDefaultMiddleware</span><span class="p">({</span>
            <span class="na">serializableCheck</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">ignoreActions</span><span class="p">:</span> <span class="p">[</span>
                    <span class="nx">FLUSH</span><span class="p">,</span> 
                    <span class="nx">REHYDRATE</span><span class="p">,</span> 
                    <span class="nx">PAUSE</span><span class="p">,</span> 
                    <span class="nx">PERSIST</span><span class="p">,</span> 
                    <span class="nx">PURGE</span><span class="p">,</span> 
                    <span class="nx">REGISTER</span>
                <span class="p">],</span> <span class="c1">//ignorando as funções nativas</span>
            <span class="p">},</span>
        <span class="p">}),</span>
<span class="p">});</span>

<span class="k">export</span> <span class="kd">let</span> <span class="nx">persistor</span> <span class="o">=</span> <span class="nx">persistStore</span><span class="p">(</span><span class="nx">store</span><span class="p">);</span> <span class="c1">//exportando o persistor</span>
</code></pre></div></div>

<p>E finalmente, utilizando esse <code class="language-plaintext highlighter-rouge">store</code> na index page, já torna possível acessar essas funções/variáveis em toda e qualquer parte do código, o que eu considerei vantajosamente diferencial.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-dom/client</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./App</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span> <span class="c1">//provider que passa a variavel store dentro</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">store</span><span class="p">,</span> <span class="nx">persistor</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./redux/store</span><span class="dl">'</span> <span class="c1">//incluindo a store e o persistor</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">PersistGate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux-persist/integration/react</span><span class="dl">'</span> <span class="c1">//PersistorGate que passa o persistor dentro</span>

<span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">));</span>

<span class="kd">const</span> <span class="nx">AppView</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Provider</span> <span class="nx">store</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">}</span><span class="o">&gt;</span>  
        <span class="o">&lt;</span><span class="nx">PersistGate</span> <span class="nx">loading</span><span class="o">=</span><span class="p">{</span><span class="kc">null</span><span class="p">}</span> <span class="nx">persistor</span><span class="o">=</span><span class="p">{</span><span class="nx">persistor</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span> 
        <span class="o">&lt;</span><span class="sr">/PersistGate</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Provider</span><span class="err">&gt;
</span><span class="p">);</span>

<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">AppView</span> <span class="o">/&gt;</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">2500</span><span class="p">);</span>
</code></pre></div></div>

<p>No projeto para gestão do site, implementei para além das funcionalidades convencionais (população de dados no banco, exclusão de dados e atualizações). Nesta etapa, busquei dados como, função de crescimento de novos clientes no último ano (um exemplo: jan: 4 clientes; fev: 10 clientes… dez: 20 clientes); porcentagens de ganhos ou perdas dos últimos 2 meses, a média das vendas dos últimos 3 meses e o lucro acumulado do item por mês (esta última na página do determinado produto). Em razão de já ter incluído bastante código nesta publicação, abaixo algumas imagens dos resultados para cada uma dessas etapas elicitados acima.</p>

<table>
  <tbody>
    <tr>
      <td>Sales</td>
      <td>representa o crescimento das vendas no último mês;</td>
    </tr>
    <tr>
      <td>Last month</td>
      <td>representa o crescimento das vendas no mês anterior em relação ao anterior dele;</td>
    </tr>
    <tr>
      <td>Mean</td>
      <td>representa a média das vendas nos últimos três meses;</td>
    </tr>
    <tr>
      <td>Users Analytics</td>
      <td>gráfico que representa o crescimento dos usuários durante uma linha do tempo de até 12 meses.</td>
    </tr>
  </tbody>
</table>

<p><img src="https://firebasestorage.googleapis.com/v0/b/ecommerce-shop-82750.appspot.com/o/Screenshot%202022-09-03%20at%2015-36-07%20Admin%20App.png?alt=media&amp;token=a8ad6ffc-8176-4d97-b260-879c3ed763db" /></p>

<p>Neste exemplo, o gráfico apresenta o valor acumulado nos 3 meses qual foi comprado o item Barrow Teddy Green, sendo 300 em julho, 900 em agosto e 600 em setembro, ao aproximar o cursor até o ponto no gráfico, uma shadowbox com todas estas informações é lançada.</p>

<p><img src="https://firebasestorage.googleapis.com/v0/b/ecommerce-shop-82750.appspot.com/o/new.png?alt=media&amp;token=26da383f-74e1-4620-90c8-6ae210ad58a2" /></p>

<p>Enfim, para complementar a publicação, uma animação das páginas mais expressivas do site, optei por algo mais minimalista e baseando-me em um projeto do Youtube, o qual faço referências no Github.</p>

<p><img src="https://firebasestorage.googleapis.com/v0/b/ecommerce-shop-82750.appspot.com/o/ok3.gif?alt=media&amp;token=10431aa3-0958-4358-b717-7eea4e2511ee" width="900" /></p>

<p>O fonte deste projeto pode estar sendo acessado neste <a href="https://github.com/jardeleko/ecommerce">repositório</a>.</p>

<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Acredito que todos os desenvolvedores passam pelo momento Ecommerce (aprendizagem ou mercado), justamente pela gama de serviços hospedados neste segmento atualmente, o que oferece praticidade aos adeptos (deliverys) e consequentemente gera empregos aos entregadores, neste projeto, busquei fazer algo funcional que ampliasse meu conhecimento com components do React, sendo assim, foquei na utilização do styled components e alguns Hooks, além do contato com o Redux e Redux Persist, razões: tokens persistentes para o carrinho de compras… O resultado realmente me surpreendeu, não costumo implementar full stack e concluir praticamente todas as etapas de construção, até em razão da demanda x tempo, entretanto este projeto me entusiasmou a este ponto. Inclusive, também foi implementado uma página administradora ao manager do site, que também inclui análises (analytics) de vendas em relação aos meses anteriores.]]></summary></entry><entry><title type="html">Projeto Mobile Facilita Imóveis</title><link href="http://localhost:4000/portfolio/react-native" rel="alternate" type="text/html" title="Projeto Mobile Facilita Imóveis" /><published>2022-08-31T20:24:06-03:00</published><updated>2022-08-31T20:24:06-03:00</updated><id>http://localhost:4000/portfolio/react-native</id><content type="html" xml:base="http://localhost:4000/portfolio/react-native"><![CDATA[<p>A algum tempo estava evitando os projetos mobiles, razões: ferramentas não híbridas ou complexas e pesadas (embora já ter desenvolvido antes utilizando <code class="language-plaintext highlighter-rouge">Ionic</code> e <code class="language-plaintext highlighter-rouge">Java // Kotlin</code>), entretanto, o <code class="language-plaintext highlighter-rouge">React Native</code> junto com o <code class="language-plaintext highlighter-rouge">EXPO</code> ampliaram meu interesse em estar desenvolvendo pequenos projetos como este. Aliás, entre as app views testadas, o native foi um dos melhores em razão do bundler (considerando análise sintática). Enfim, para testar melhor a ferramenta, busquei um problema existente baseando-se no aplicativo Airbnb e utilizando templates encontrados em repositórios do Github. Sendo assim, o projeto consistiu em uma aplicação de aluguéis de casas (ou cômodos), garagens e salas comerciais; onde a principal característica pode ser definida pela locação sem intermediações (imobiliárias ou corretores), ou seja, os cliente ofertando seus imóveis e se comunicando entre si.</p>

<p>Buscando não publicar uma documentação extensa, separei três etapas que deram identidade ao projeto, sendo estas: Chat implementado com a lib <code class="language-plaintext highlighter-rouge">Gifted Chat</code>, Autenticação via email (em razão de ter que desenvolver um app em cloud na <code class="language-plaintext highlighter-rouge">GCP</code>) e por fim, a redefinição de senha utilizando um servidor <code class="language-plaintext highlighter-rouge">SMTP</code>, para isto utilizei a <code class="language-plaintext highlighter-rouge">Sendinblue</code>.</p>

<p>Curiosamente, passei uma certa dificuldade ao implementar o chat em razão da minha insistência em utilizar <code class="language-plaintext highlighter-rouge">websockets</code> através do framework <code class="language-plaintext highlighter-rouge">socket.io</code>, o que posteriormente vi que era impossível na versão atual do Gifted, ainda não sei porque, mas essas informações sempre estão em um limbo da internet e acabam roubando muito tempo de quem as necessita. Mas o resultado foi interessante, abaixo alguns trechos que exemplificam o uso desta lib.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">GiftedChat</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-gifted-chat</span><span class="dl">'</span>
	<span class="kd">const</span> <span class="p">[</span><span class="nx">messages</span><span class="p">,</span> <span class="nx">setMessages</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([])</span>    <span class="c1">//variáveis para lançar novas mensagens</span>
    <span class="c1">//normalmente essas variaveis são iniciadas antes, buscando dados historicos da conversação dos usuarios relacionados, publicador e current </span>
	<span class="kd">const</span> <span class="nx">onSend</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">((</span><span class="nx">messages</span> <span class="o">=</span> <span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">setMessages</span><span class="p">(</span><span class="nx">previousMessages</span> <span class="o">=&gt;</span> <span class="nx">GiftedChat</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">previousMessages</span><span class="p">,</span> <span class="nx">messages</span><span class="p">))</span> <span class="c1">//empilha a nova mensagem</span>
		<span class="nx">asyncSubmitMessage</span><span class="p">(</span><span class="nx">messages</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">//função que envia a mensagem ao banco de dados</span>
	<span class="p">},</span> <span class="p">[</span><span class="nx">control</span><span class="p">])</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">GiftedChat</span> <span class="c1">//utilizando a ferramenta </span>
            <span class="nx">messages</span><span class="o">=</span><span class="p">{</span><span class="nx">messages</span><span class="p">}</span>
            <span class="nx">onSend</span><span class="o">=</span><span class="p">{</span><span class="nx">text</span> <span class="o">=&gt;</span> <span class="nx">onSend</span><span class="p">(</span><span class="nx">text</span><span class="p">)}</span>
            
            <span class="nx">user</span><span class="o">=</span><span class="p">{{</span>
                <span class="na">_id</span><span class="p">:</span> <span class="nx">currentUser</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
                <span class="na">idRec</span><span class="p">:</span> <span class="nx">idReceiver</span> <span class="o">!==</span> <span class="nx">currentUser</span><span class="p">.</span><span class="nx">_id</span> <span class="p">?</span> <span class="nx">idReceiver</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">errorId</span><span class="dl">"</span><span class="p">,</span>
                <span class="na">name</span><span class="p">:</span> <span class="nx">currentUser</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
                <span class="na">idHouse</span><span class="p">:</span> <span class="nx">idHouse</span>
            <span class="p">}}</span>
        
        <span class="sr">/</span><span class="err">&gt;
</span>    <span class="p">)</span>
</code></pre></div></div>

<p>O Google Cloud Platform é um servidor muito amigável, com ele, foi simples implementar o serviço externo (app ou página para autenticação). E assim que gerada as credenciais, a implementação deu-se da seguinte forma:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">WebBrowser</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">expo-web-browser</span><span class="dl">'</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">Google</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">expo-auth-session/providers/google</span><span class="dl">'</span> <span class="c1">//lib indicada pela doc do expo</span>

<span class="nx">WebBrowser</span><span class="p">.</span><span class="nx">maybeCompleteAuthSession</span><span class="p">()</span> <span class="c1">//incia o webbrowser para autenticações</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">accessTk</span><span class="p">,</span> <span class="nx">setAccessTk</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">userInfo</span><span class="p">,</span> <span class="nx">setUserInfo</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">promptAsync</span><span class="p">]</span> <span class="o">=</span> <span class="nx">Google</span><span class="p">.</span><span class="nx">useIdTokenAuthRequest</span><span class="p">({</span> <span class="c1">//utilizando as credenciais criadas na nuvem</span>
        <span class="na">expoClientId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">347880960520-sje8ods0rcbl5v6lpadu6pmsjo1p********.apps.googleusercontent.com</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">androidClientId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">347880960520-of68n10pgllkm6nn61ppnb5v351********.apps.googleusercontent.com</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">iosClientId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">347880960520-******************.apps.googleusercontent.com</span><span class="dl">'</span>
    <span class="p">})</span>

    <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">//use effect para verificar se a autenticação gmail foi iniciada, se sim, verifica o exito </span>
        <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">?.</span><span class="nx">type</span> <span class="o">===</span><span class="dl">'</span><span class="s1">success</span><span class="dl">'</span><span class="p">){</span> <span class="c1">//se exito</span>
            <span class="nx">setAccessTk</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id_token</span><span class="p">)</span> <span class="c1">//pega o token do usuario</span>
            <span class="nx">accessTk</span> <span class="o">&amp;&amp;</span> <span class="nx">fetchUserInfo</span><span class="p">()</span> <span class="c1">//se tem token chama a função para buscar dados do usuario</span>
        <span class="p">}</span>
    <span class="p">},[</span><span class="nx">response</span><span class="p">,</span> <span class="nx">accessTk</span><span class="p">])</span>

    <span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchUserInfo</span><span class="p">(){</span> <span class="c1">//aqui esta o pulo do gato, demorei um pouco p encontrar esta query</span>
    <span class="c1">//como tudo na vida tem um preço, este deve ter me custado umas 2 ou 3 horas hahaha </span>
        <span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">`https://oauth2.googleapis.com/tokeninfo?id_token=</span><span class="p">${</span><span class="nx">accessTk</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span> <span class="c1">//dita query sobre quem eu falo</span>
        <span class="kd">const</span> <span class="nx">userInfo</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span> <span class="c1">//se temos resposta temos json format</span>
        <span class="nx">setUserInfo</span><span class="p">(</span><span class="nx">userInfo</span><span class="p">)</span> <span class="c1">//atribuindo os dados a minha variavel userInfo</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>Na página da sendinblue, o serviço é praticamente resgatar as variáveis (caso escolha utilizar via smtp): host, port, cliente, no meu projeto, escolhi integrar desta forma, entretanto, há também uma opção de integração via api. No backend, a ferramenta necessária foi a lib <code class="language-plaintext highlighter-rouge">Nodemailer</code>, que garantiu a conexão com o serviço da sendin, permitindo o disparo de emails a todos os clientes que solicitarem a redefinição de senha, o fonte após a implementação:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">nodemailer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">nodemailer</span><span class="dl">'</span><span class="p">)</span> <span class="c1">//importa o nodemailer</span>
<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">).</span><span class="nx">Router</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">transport</span> <span class="o">=</span> <span class="nx">nodemailer</span><span class="p">.</span><span class="nx">createTransport</span><span class="p">({</span>  <span class="c1">//n-mailer criando a variavel de conexão e transporte</span>
  <span class="na">host</span><span class="p">:</span> <span class="dl">"</span><span class="s2">smtp-relay.sendinblue.com</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">port</span><span class="p">:</span> <span class="mi">587</span><span class="p">,</span>
  <span class="na">auth</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">user</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jardelduarte***@gmail.com</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">pass</span><span class="p">:</span> <span class="dl">"</span><span class="s2">HIa4J1T0vsynw****</span><span class="dl">"</span>
  <span class="p">}</span>
  <span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/forgot</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// iniciando a rota</span>
  <span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="na">email</span><span class="p">:</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">){</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">422</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="dl">'</span><span class="s1">user not exists!</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="kd">const</span> <span class="nx">expired</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="mi">3600000</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="c1">//variavel que gera um timeout de 30 minutos para expiração do token</span>
    <span class="kd">const</span> <span class="nx">aux</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">65536</span><span class="p">)</span> <span class="c1">//o token de no minimo 4 digitos gerados ao aleatorio</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">aux</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">1234</span><span class="p">)</span> <span class="nx">aux</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">65536</span><span class="p">)</span>
    <span class="nx">user</span><span class="p">.</span><span class="nx">passwdToken</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">aux</span><span class="p">)</span>
    <span class="nx">user</span><span class="p">.</span><span class="nx">expireToken</span> <span class="o">=</span> <span class="nx">expired</span>
    <span class="nx">user</span><span class="p">.</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span><span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
      <span class="nx">transport</span><span class="p">.</span><span class="nx">sendMail</span><span class="p">({</span> <span class="c1">//apos verificar que o usuario existe no bd, a variavel global transport, envia o email com os dados do usuario e com o email padrão definido no html</span>
        <span class="na">to</span><span class="p">:</span><span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
        <span class="na">from</span><span class="p">:</span> <span class="dl">"</span><span class="s2">no-replay@facilitaimoveis.com.br</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">subject</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Redifinição de Senha, Facilita Imóveis</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">html</span><span class="p">:</span> <span class="dl">"</span><span class="s2">&lt;p&gt;&lt;h3&gt;Olá, </span><span class="dl">"</span><span class="o">+</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="dl">"</span><span class="s2">.&lt;h3&gt;&lt;/p&gt; &lt;br&gt;&lt;br&gt; &lt;p&gt;Vimos que você solicitou a recuperação de senha.&lt;/p&gt; &lt;p&gt;Para continuar, insira o código &lt;strong&gt;</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">aux</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/strong&gt;  na página de verificação iniciada no seu aplicativo..&lt;/p&gt;</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">})</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="na">token</span><span class="p">:</span><span class="nx">aux</span><span class="p">,</span> <span class="nx">expired</span><span class="p">})</span> <span class="c1">//se success, encaminha as variaveis para tratar no frontend</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span><span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">})</span>
<span class="p">})</span>

</code></pre></div></div>

<p>Enfim, gostei dos desafios durante esta construção, em principal pela facilidade de desenvolver mobile com a ferramenta EXPO, o código fonte pode ser acessado neste <a href="https://github.com/jardeleko/facilita">repositório</a> e abaixo, algumas animações com o resultado final de duas etapas detalhadas nesta publicação.</p>

<table>
  <tbody>
    <tr>
      <td><img src="https://firebasestorage.googleapis.com/v0/b/facilitastorage.appspot.com/o/chat.gif?alt=media&amp;token=00c220ab-69a3-4ef4-8460-bc012e103245" alt="chat" /></td>
      <td><img src="https://firebasestorage.googleapis.com/v0/b/facilitastorage.appspot.com/o/login.gif?alt=media&amp;token=f77e33f7-ef3d-4d1b-851a-3327a22a4ef0" alt="login" /></td>
    </tr>
  </tbody>
</table>

<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[A algum tempo estava evitando os projetos mobiles, razões: ferramentas não híbridas ou complexas e pesadas (embora já ter desenvolvido antes utilizando Ionic e Java // Kotlin), entretanto, o React Native junto com o EXPO ampliaram meu interesse em estar desenvolvendo pequenos projetos como este. Aliás, entre as app views testadas, o native foi um dos melhores em razão do bundler (considerando análise sintática). Enfim, para testar melhor a ferramenta, busquei um problema existente baseando-se no aplicativo Airbnb e utilizando templates encontrados em repositórios do Github. Sendo assim, o projeto consistiu em uma aplicação de aluguéis de casas (ou cômodos), garagens e salas comerciais; onde a principal característica pode ser definida pela locação sem intermediações (imobiliárias ou corretores), ou seja, os cliente ofertando seus imóveis e se comunicando entre si.]]></summary></entry><entry><title type="html">Configurando broker Mosquitto (Escalabilidade)</title><link href="http://localhost:4000/portfolio/relatorio" rel="alternate" type="text/html" title="Configurando broker Mosquitto (Escalabilidade)" /><published>2022-04-21T20:24:06-03:00</published><updated>2022-04-21T20:24:06-03:00</updated><id>http://localhost:4000/portfolio/relatorio</id><content type="html" xml:base="http://localhost:4000/portfolio/relatorio"><![CDATA[<p>Este Tutorial é indicado aos usuários de distros baseadas em <code class="language-plaintext highlighter-rouge">Debian</code>. Caso contrário, parte das configurações (talvez) não sejam validas, let’s bora.</p>

<p>As distros baseadas em Debian possuem um limite de arquivos a serem abertos, definidos por padrão em no máximo 1024 arquivos simultâneos. Para que os testes em escala do <code class="language-plaintext highlighter-rouge">broker Mosquitto</code> sejam executáveis nestes sistemas, uma alteração no arquivo <em>system.conf</em> é fundamental.</p>

<p>A rota utilizada para encontrar este arquivo é <em>/etc/systemd/system.conf</em>;</p>

<p>Então, busque a váriavel DefaultLimitNOFILE que estará comentada, defina-a para o valor máximo de arquivos que você deseja abrir em simultâneo, neste exemplo 65535.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">DefaultLimitNOFILE</span> <span class="o">=</span> <span class="mi">65535</span></code></pre></figure>

<p>Entretando, o <code class="language-plaintext highlighter-rouge">broker Mosquitto</code> possui um limite rígido de conexões, e em sua documentação, para ajustar este limite, deve-se abrir o arquivo <a href="https://mosquitto.org/man/mosquitto-conf-5.html">mosquitto.conf</a>, que se encontra em <em>/etc/mosquitto/mosquitto.conf</em> e incluir a variável max_connections;</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"> <span class="nv">max_connections</span> <span class="mi">-1</span></code></pre></figure>

<p>O valor -1 consiste em ilimitadas conexões.</p>

<p>No manual do <a href="https://mosquitto.org/man/mosquitto-conf-5.html">mosquitto.conf</a> é aconselhado uma alteração no arquivo <em>limits.conf</em>, encontrado no diretório <em>/etc/security/limits.conf</em>. Logo, devemos inserir duas linhas que reforçam os limites rígidos e também de software do sistema, ambos definidos em 65535.</p>

<figure class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="o">#</span><span class="nv">&lt;domain&gt;</span>      <span class="nv">&lt;type&gt;</span>  <span class="nv">&lt;item&gt;</span>         <span class="nv">&lt;value&gt;</span>
<span class="o">#</span>
<span class="nv">*</span>               <span class="nv">hard</span>    <span class="nv">nofile</span>         <span class="mi">65535</span>
<span class="nv">*</span>               <span class="nv">soft</span>    <span class="nv">nofile</span>         <span class="mi">65535</span>
<span class="o">#</span> <span class="nv">End</span> <span class="nv">of</span> <span class="nv">file</span></code></pre></figure>

<p>Enfim, para que as atualizações façam efeito, torna-se necessário reinicializar o <code class="language-plaintext highlighter-rouge">daemon</code> do sistema e também o <code class="language-plaintext highlighter-rouge">serviço Mosquitto</code>.</p>

<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Este Tutorial é indicado aos usuários de distros baseadas em Debian. Caso contrário, parte das configurações (talvez) não sejam validas, let’s bora.]]></summary></entry><entry><title type="html">Pesquisa acadêmica do protocolo MQTT</title><link href="http://localhost:4000/portfolio/pesquisa-mqtt-copy" rel="alternate" type="text/html" title="Pesquisa acadêmica do protocolo MQTT" /><published>2022-04-20T20:24:06-03:00</published><updated>2022-04-20T20:24:06-03:00</updated><id>http://localhost:4000/portfolio/pesquisa-mqtt%20copy</id><content type="html" xml:base="http://localhost:4000/portfolio/pesquisa-mqtt-copy"><![CDATA[<p>A Internet of Things (IoT) surgiu em 1999 através do Massachusetts Institute of Techno-
logy (MIT) e foi conceituado para comunicação Machine to Machine (M2M), ou seja, máquinas
se comunicando entre si (sensores, conexão de eletrônicos, controladores, etc) por meio de
Bluetooth, Radio-Frequency Identification (RFID), Wireless Fidelity (WIFI) e/ou rede cabeada.
Estes dispositivos se comunicam em cima de uma camada de rede, utilizando diversos protoco-
los e servidores na nuvem que hospedam e disseminam as informações publicadas. Somando
a quantidade de conexões suportadas e o baixo consumo de energia dos sensores, a rede IoT
cresceu de uma maneira exponencial nos desenvolvimentos de projetos de mobilidade urbana,
automação residencial e industrial.</p>
<p>Segundo a Telecommunication Union (ITU) (12), a internet das coisas é “Uma infra-
estrutura global para a sociedade da informação, permitindo serviços avançados através da
interconexão (física e virtual) de coisas baseadas em tecnologias interoperáveis de informação
e comunicação, existentes e em evolução ". Em uma análise estimativa, a IoT tem probabilidade
de crescer com ganhos de 25 a 50 bilhões de dispositivos conectados até 2025. De acordo com
Manyika (15), as principais áreas de potencial investimento são a saúde, agricultura e fabricantes
que utilizam sensores para otimizar a manutenção de equipamentos e proteger a segurança dos
trabalhadores. Em sua análise ascendente, é dimensionado um impacto econômico com poten-
cial total de U$3,9 trilhões a U$11,1 trilhões por ano até 2025, o que seria aproximadamente
11% da economia mundial.</p>
<p>Para que haja a possibilidade de uma comunicação neste modelo, é necessário que exista
uma arquitetura de rede que permita o envio e o recebimento de todas essas informações.
Os pacotes de dados necessitam de identificação para serem entregues em seus destinos, essa
comunicação é feita através de protocolos, como Transmission Control Protocol (TCP), User
Datagram Protocol (UDP), entre outros. Silva (23) documenta, que tanto o TCP quanto o
UDP funcionam em cima do Internet Protocol (IP), o IP é responsável pelo endereçamento das
máquinas, garantindo que estas estejam identificadas na rede. Outros protocolos comumente
visto em rede IoT, são: protocolo Message Queue Telemetry Transport (MQTT), aplicado em
cima do TCP/IP, que utiliza de agentes mensageiros nomeados como publisher e subscriber,
estes se comunicam mediante um broker atuante como um servidor; Constrained Application
Protocol (CoAP), que é um protocolo de padrão Request For Comments (RFC), normalmente
utilizado em aplicação de sensores vide sua simplicidade; Extensible Messaging and Presence
Protocol (XMPP), um protocolo aberto baseado em Extensible Markup Language (XML), com
padrão Internet Engineering Task Force (IETF), projetado para uso de aplicações de mensagens
instantâneas em tempo real.</p>
<p>Completando o cenário da comunicação M2M, na maioria dos casos é fundamental
a existência de um gateway, onde atua como responsável pela distribuição dos pacotes de
mensagens lançados por cada sensor, podendo também ser nomeado como um tradutor de
protocolos nesta mediação. O gateway no IoT está agregado ao conceito de Fog Computing
(Computação de borda ou computação em névoa), pois se encontra exatamente entre os sensores
e a Cloud (nuvem) e permitem que mais coisas sejam introduzidas em operações de conexão
em escala industrial, isto por suportarem diversos protocolos, ou serem implementados como
multiprotocolos devido a aplicação em cenários difíceis da indústria 4.0 e cidades inteligentes.
Entretanto, Silva (23) comenta em sua monografia, que existem desafios para o futuro
da IoT nos próximos anos, como a regulamentação, padronização e segurança, isto por motivo
de ter muitos protocolos implementados para rede IoT, onde cada protocolo tende a resolver
somente um problema, se mantendo restrito quanto à utilização geral. Ele também fomenta,
que a estimativa da inclusão do IoT em quase todos os dispositivos móveis ocorra em um
curto espaço de tempo, sendo os dispositivos: medidores de estacionamento, pneus, estradas,
monitores cardiovasculares, termostatos, sensores de presença, prateleiras de supermercados,
assim dizendo, uma imensa quantia de dispositivos conectados com a internet das coisas, gerando
uma propensa exploração das vulnerabilidade, problemas de privacidade com a disseminação
dos dados sensíveis e segurança com possíveis cenários de ataques. Por estas circunstâncias
são necessários regulamentos adequados, que evitem arriscar a segurança dos dispositivos e a
validade da IoT do futuro.</p>
<p>Enfim, a partir da análise do crescimento da internet das coisas, surge a proposta visando
explorar alguns destes exemplos citados, em principal o protocolo MQTT. O cenário selecionado
é definido por um dispositivo Raspberry Pi 4 como servidor/broker e um computador fazendo
disparos de publicações e/ou assinaturas, para então explorar o gargalo do dispositivo, com
intuito de analisar custos de processamento, o índice de utilização de memória, tráfego da rede
e as taxas de envio/entrega das mensagens.</p>

<p>Para ler os resultados desta pesquisa, acesse <a href="https://github.com/jardeleko/2022/tree/main/TCCII">TCCII</a> .</p>

<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[A Internet of Things (IoT) surgiu em 1999 através do Massachusetts Institute of Techno- logy (MIT) e foi conceituado para comunicação Machine to Machine (M2M), ou seja, máquinas se comunicando entre si (sensores, conexão de eletrônicos, controladores, etc) por meio de Bluetooth, Radio-Frequency Identification (RFID), Wireless Fidelity (WIFI) e/ou rede cabeada. Estes dispositivos se comunicam em cima de uma camada de rede, utilizando diversos protoco- los e servidores na nuvem que hospedam e disseminam as informações publicadas. Somando a quantidade de conexões suportadas e o baixo consumo de energia dos sensores, a rede IoT cresceu de uma maneira exponencial nos desenvolvimentos de projetos de mobilidade urbana, automação residencial e industrial. Segundo a Telecommunication Union (ITU) (12), a internet das coisas é “Uma infra- estrutura global para a sociedade da informação, permitindo serviços avançados através da interconexão (física e virtual) de coisas baseadas em tecnologias interoperáveis de informação e comunicação, existentes e em evolução ". Em uma análise estimativa, a IoT tem probabilidade de crescer com ganhos de 25 a 50 bilhões de dispositivos conectados até 2025. De acordo com Manyika (15), as principais áreas de potencial investimento são a saúde, agricultura e fabricantes que utilizam sensores para otimizar a manutenção de equipamentos e proteger a segurança dos trabalhadores. Em sua análise ascendente, é dimensionado um impacto econômico com poten- cial total de U$3,9 trilhões a U$11,1 trilhões por ano até 2025, o que seria aproximadamente 11% da economia mundial. Para que haja a possibilidade de uma comunicação neste modelo, é necessário que exista uma arquitetura de rede que permita o envio e o recebimento de todas essas informações. Os pacotes de dados necessitam de identificação para serem entregues em seus destinos, essa comunicação é feita através de protocolos, como Transmission Control Protocol (TCP), User Datagram Protocol (UDP), entre outros. Silva (23) documenta, que tanto o TCP quanto o UDP funcionam em cima do Internet Protocol (IP), o IP é responsável pelo endereçamento das máquinas, garantindo que estas estejam identificadas na rede. Outros protocolos comumente visto em rede IoT, são: protocolo Message Queue Telemetry Transport (MQTT), aplicado em cima do TCP/IP, que utiliza de agentes mensageiros nomeados como publisher e subscriber, estes se comunicam mediante um broker atuante como um servidor; Constrained Application Protocol (CoAP), que é um protocolo de padrão Request For Comments (RFC), normalmente utilizado em aplicação de sensores vide sua simplicidade; Extensible Messaging and Presence Protocol (XMPP), um protocolo aberto baseado em Extensible Markup Language (XML), com padrão Internet Engineering Task Force (IETF), projetado para uso de aplicações de mensagens instantâneas em tempo real. Completando o cenário da comunicação M2M, na maioria dos casos é fundamental a existência de um gateway, onde atua como responsável pela distribuição dos pacotes de mensagens lançados por cada sensor, podendo também ser nomeado como um tradutor de protocolos nesta mediação. O gateway no IoT está agregado ao conceito de Fog Computing (Computação de borda ou computação em névoa), pois se encontra exatamente entre os sensores e a Cloud (nuvem) e permitem que mais coisas sejam introduzidas em operações de conexão em escala industrial, isto por suportarem diversos protocolos, ou serem implementados como multiprotocolos devido a aplicação em cenários difíceis da indústria 4.0 e cidades inteligentes. Entretanto, Silva (23) comenta em sua monografia, que existem desafios para o futuro da IoT nos próximos anos, como a regulamentação, padronização e segurança, isto por motivo de ter muitos protocolos implementados para rede IoT, onde cada protocolo tende a resolver somente um problema, se mantendo restrito quanto à utilização geral. Ele também fomenta, que a estimativa da inclusão do IoT em quase todos os dispositivos móveis ocorra em um curto espaço de tempo, sendo os dispositivos: medidores de estacionamento, pneus, estradas, monitores cardiovasculares, termostatos, sensores de presença, prateleiras de supermercados, assim dizendo, uma imensa quantia de dispositivos conectados com a internet das coisas, gerando uma propensa exploração das vulnerabilidade, problemas de privacidade com a disseminação dos dados sensíveis e segurança com possíveis cenários de ataques. Por estas circunstâncias são necessários regulamentos adequados, que evitem arriscar a segurança dos dispositivos e a validade da IoT do futuro. Enfim, a partir da análise do crescimento da internet das coisas, surge a proposta visando explorar alguns destes exemplos citados, em principal o protocolo MQTT. O cenário selecionado é definido por um dispositivo Raspberry Pi 4 como servidor/broker e um computador fazendo disparos de publicações e/ou assinaturas, para então explorar o gargalo do dispositivo, com intuito de analisar custos de processamento, o índice de utilização de memória, tráfego da rede e as taxas de envio/entrega das mensagens.]]></summary></entry><entry><title type="html">Sistemas Especialistas - IA</title><link href="http://localhost:4000/portfolio/sistemas-especialistas" rel="alternate" type="text/html" title="Sistemas Especialistas - IA" /><published>2021-12-08T13:57:00-03:00</published><updated>2021-12-08T13:57:00-03:00</updated><id>http://localhost:4000/portfolio/sistemas-especialistas</id><content type="html" xml:base="http://localhost:4000/portfolio/sistemas-especialistas"><![CDATA[<p>Projeto desenvolvido para o componente curricular de <code class="language-plaintext highlighter-rouge">Inteligência Artificial</code>, o intuito foi o desenvolvimento de um <code class="language-plaintext highlighter-rouge">sistema especialista</code> baseando-se nos modelos apresentados. Neste, fiz a escolha em elaborar um serviço no qual a máquina identifica o tipo de arte (visual e/ou digital) que o usuário tem mais interesse, foi implementado com a linguagem de programação Python.</p>

<p>Durante a coleta dos dados, foi necessário construir um pequeno dataset identificando as relações hereditárias, listadas abaixo.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"> <span class="c1">#se  -   então</span>
<span class="n">colorido</span><span class="o">-</span><span class="n">surrealista</span> 
<span class="n">colorido</span><span class="o">-</span><span class="n">renascentista</span>
<span class="n">colorido</span><span class="o">-</span><span class="n">minimalista</span>
<span class="n">colorido</span><span class="o">-</span><span class="n">artdigital</span>
<span class="n">pb</span><span class="o">-</span><span class="n">renascentista</span>
<span class="n">pb</span><span class="o">-</span><span class="n">minimalista</span>
<span class="n">pb</span><span class="o">-</span><span class="n">artdigital</span>
<span class="n">pixel</span><span class="o">-</span><span class="n">artdigital</span>
<span class="n">abstrato</span><span class="o">-</span><span class="n">surrealista</span>
<span class="n">fotofig</span><span class="o">-</span><span class="n">renascentista</span>
<span class="n">geometrico</span><span class="o">-</span><span class="n">minimalista</span></code></pre></figure>

<p>Para construir a máquina foram criadas duas classes (<code class="language-plaintext highlighter-rouge">Pergunta e Identifica</code>) que posteriormente foram inclusas na função principal que executa o programa.</p>

<p>A classe <code class="language-plaintext highlighter-rouge">Pergunta</code>, recolhe os valores (<code class="language-plaintext highlighter-rouge">S</code> ou <code class="language-plaintext highlighter-rouge">N</code>) que o usuário vai respondendo assim que o programa é executado, similar a um Quizz, onde cada pergunta possui uma resposta “correta” e que irá atribuir uma probabilidade em caso de acerto.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"> <span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="o">*</span>
<span class="k">class</span> <span class="nc">Pergunta</span><span class="p">:</span>
<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s">'Você gosta de pinturas coloridas?'</span><span class="p">,</span><span class="s">'colorido'</span><span class="p">],</span>
    <span class="p">[</span><span class="s">'Te agrada figuras abstratas, coisas distorcidas?'</span><span class="p">,</span><span class="s">'abstrato'</span><span class="p">],</span>
    <span class="p">[</span><span class="s">'Você gosta de pinturas em preto e branco?'</span><span class="p">,</span><span class="s">'pb'</span><span class="p">],</span>
    <span class="p">[</span><span class="s">'Para voce a arte pode ser vista digitalmente?'</span><span class="p">,</span><span class="s">'pixel'</span><span class="p">],</span>
    <span class="p">[</span><span class="s">'Poucos detalhes, simbolos, textos e desenhos?'</span><span class="p">,</span><span class="s">'geometrico'</span><span class="p">],</span>
    <span class="p">[</span><span class="s">'Pinturas de pessoas(rostos, lugares)?'</span><span class="p">,</span><span class="s">'fotofig'</span><span class="p">],</span>		
    <span class="p">]</span>

<span class="k">def</span> <span class="nf">texto</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">string</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">level</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">del</span> <span class="bp">self</span><span class="p">.</span><span class="n">level</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">string</span></code></pre></figure>

<p>A classe abaixo (<code class="language-plaintext highlighter-rouge">Identifica</code>) é responsavel por pegar a resposta do usuário e fazer a identificação a partir da lista dos possíveis cenários do nosso set hereditário. Buscando a probabilidade e removendo os casos que não existem relações com a resposta.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"> <span class="k">class</span> <span class="nc">Identifica</span><span class="p">():</span>
<span class="c1"># metodo construtor
</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">resultado</span> <span class="o">=</span> <span class="p">[</span><span class="s">'surrealista'</span><span class="p">,</span> <span class="s">'renascentista'</span><span class="p">,</span> <span class="s">'minimalista'</span><span class="p">,</span> <span class="s">'artdigital'</span><span class="p">]</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">pessoa</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">db</span> <span class="o">=</span> <span class="p">[]</span>
<span class="c1"># abre o arquivo db.txt em modo leitura e passa os dados para
# uma lista de listas de str
</span>    <span class="n">arquivo</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'db.txt'</span><span class="p">,</span><span class="s">'r'</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">linha</span> <span class="ow">in</span> <span class="n">arquivo</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">linha</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">linha</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">:</span>
            <span class="n">linha</span> <span class="o">=</span> <span class="n">linha</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>
            <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">db</span><span class="p">).</span><span class="n">append</span><span class="p">(</span><span class="n">linha</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'-'</span><span class="p">))</span>
    <span class="n">arquivo</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># imprime a quantidade de possibilidades cadastradas
</span><span class="k">def</span> <span class="nf">tamanho</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">))</span>

<span class="c1"># imprime a probabilidade do diagnótico
</span><span class="k">def</span> <span class="nf">probabilidade</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="nb">int</span><span class="p">((</span><span class="mi">1</span><span class="o">/</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">)))</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>

<span class="c1"># verifica se diagnóstico pensado tem a caracteristica passada por parametro
</span><span class="k">def</span> <span class="nf">busca</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">familiar</span><span class="p">,</span> <span class="n">caract</span><span class="p">):</span>	
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">db</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">familiar</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">db</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">db</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">caract</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="bp">False</span>				

<span class="c1"># remove os diagnósticos que não possuem o atributo passado por parametro
</span><span class="k">def</span> <span class="nf">excluiquemnaoe</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">atributo</span><span class="p">):</span>
    <span class="n">lista</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">)):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">busca</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">atributo</span><span class="p">):</span>
            <span class="n">lista</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">count</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">lista</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
	
<span class="c1"># remove os cenários que possuem o atributo passado por parametro
</span><span class="k">def</span> <span class="nf">excluiqueme</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">atributo</span><span class="p">):</span>
    <span class="n">lista</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">)):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">busca</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">atributo</span><span class="p">):</span>
            <span class="n">lista</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">count</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">resultado</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">lista</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    
<span class="k">def</span> <span class="nf">pergunta</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">pergunta</span><span class="p">,</span> <span class="n">caract</span><span class="p">):</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="n">pergunta</span><span class="o">+</span><span class="s">': '</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">resp</span> <span class="o">==</span> <span class="s">'s'</span> <span class="ow">or</span> <span class="n">resp</span> <span class="o">==</span> <span class="s">'S'</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">excluiquemnaoe</span><span class="p">(</span><span class="n">caract</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">resp</span> <span class="o">==</span> <span class="s">'n'</span> <span class="ow">or</span> <span class="n">resp</span> <span class="o">==</span> <span class="s">'N'</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">excluiqueme</span><span class="p">(</span><span class="n">caract</span><span class="p">)</span></code></pre></figure>

<p>Enfim, a <code class="language-plaintext highlighter-rouge">main</code> executa o programa até que a probabilidade da característica seja 100%, enquanto não for, o programa continua perguntando ao usuário, no fim, retorna o tipo de arte que a pessoa tem propensão e mostra alguns pintores daquela característica, selecionados por mim.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"> <span class="kn">from</span> <span class="nn">classId</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">classPerguntas</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1">#Inferência
</span><span class="n">se</span> <span class="o">=</span> <span class="n">Identifica</span><span class="p">()</span>
<span class="n">pergunta</span> <span class="o">=</span> <span class="n">Pergunta</span><span class="p">()</span>


<span class="k">while</span> <span class="n">se</span><span class="p">.</span><span class="n">probabilidade</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">100</span><span class="p">:</span>
	<span class="n">string</span> <span class="o">=</span> <span class="n">pergunta</span><span class="p">.</span><span class="n">texto</span><span class="p">()</span>
	<span class="n">se</span><span class="p">.</span><span class="n">pergunta</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">string</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
	<span class="k">print</span><span class="p">(</span><span class="s">'probabilidade é %d'</span> <span class="o">%</span><span class="p">(</span><span class="n">se</span><span class="p">.</span><span class="n">probabilidade</span><span class="p">()))</span>
	<span class="k">print</span><span class="p">(</span><span class="n">se</span><span class="p">.</span><span class="n">resultado</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">se</span><span class="p">.</span><span class="n">probabilidade</span><span class="p">()</span> <span class="o">==</span> <span class="mi">100</span><span class="p">:</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Arte mais indicado para você é: '</span><span class="p">,</span><span class="n">se</span><span class="p">.</span><span class="n">resultado</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
		<span class="k">if</span><span class="p">(</span><span class="n">se</span><span class="p">.</span><span class="n">resultado</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'surrealista'</span><span class="p">):</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"Pintores relacionados:</span><span class="se">\n</span><span class="s"> Vicente Van Gogh </span><span class="se">\n</span><span class="s"> Salvador Dalí </span><span class="se">\n</span><span class="s"> Pablo Picasso </span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
		<span class="k">elif</span><span class="p">(</span><span class="n">se</span><span class="p">.</span><span class="n">resultado</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'renascentista'</span><span class="p">):</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"Pintores relacionados:</span><span class="se">\n</span><span class="s"> Michelangelo </span><span class="se">\n</span><span class="s"> Leonardo da Vinci </span><span class="se">\n</span><span class="s"> Rafael </span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
		<span class="k">elif</span><span class="p">(</span><span class="n">se</span><span class="p">.</span><span class="n">resultado</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'minimalista'</span><span class="p">):</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"Pintores relacionados:</span><span class="se">\n</span><span class="s"> Donald Judd </span><span class="se">\n</span><span class="s"> Yayoi kusama </span><span class="se">\n</span><span class="s"> Frank Stella </span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
		<span class="k">elif</span><span class="p">(</span><span class="n">se</span><span class="p">.</span><span class="n">resultado</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'artdigital'</span><span class="p">):</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"Pintores relacionados:</span><span class="se">\n</span><span class="s"> Mike Winkelmann </span><span class="se">\n</span><span class="s"> Banksy </span><span class="se">\n</span><span class="s"> Giselle Beiguelman </span><span class="se">\n</span><span class="s">"</span><span class="p">)</span></code></pre></figure>

<p>Link para acessar o conteúdo:<a href="https://github.com/jardeleko/Python/tree/master/Machine%20Learning/Sistemas%20Especialistas">especialista-IA</a>.</p>

<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Projeto desenvolvido para o componente curricular de Inteligência Artificial, o intuito foi o desenvolvimento de um sistema especialista baseando-se nos modelos apresentados. Neste, fiz a escolha em elaborar um serviço no qual a máquina identifica o tipo de arte (visual e/ou digital) que o usuário tem mais interesse, foi implementado com a linguagem de programação Python.]]></summary></entry><entry><title type="html">Projeto Web Flow Filmes</title><link href="http://localhost:4000/portfolio/flow.md" rel="alternate" type="text/html" title="Projeto Web Flow Filmes" /><published>2021-05-17T13:57:00-03:00</published><updated>2021-05-17T13:57:00-03:00</updated><id>http://localhost:4000/portfolio/flow.md</id><content type="html" xml:base="http://localhost:4000/portfolio/flow.md"><![CDATA[<p>O projeto consistiu em implementar uma platforma digital que ajudasse na tomada de decisões, na qual o usuário entrava e verifica os filmes das plataformas: <code class="language-plaintext highlighter-rouge">Amazon Prime Video, Globo Play e Netflix</code>, cada filme lançado garantia comentários e avaliações dos usuários, similar a uma rede social, que permitisse buscas relacionadas ao interesse de cada um, e assim, havendo uma colaboração entre os usuários que buscassem indicações no site Flow.</p>

<p>O <code class="language-plaintext highlighter-rouge">Flow Filmes</code> foi um dos projetos web que criei utilizando <code class="language-plaintext highlighter-rouge">javascript</code> em quase todo processo de desenvolvimento (82%), sendo: <code class="language-plaintext highlighter-rouge">Nodejs</code> no back-end e <code class="language-plaintext highlighter-rouge">ejs</code> no front-end.</p>

<p>Em razão de ter arquivos extensos, estarei trazendo apenas as etapas de construção que deram uma certa identidade ao projeto e algumas imagens dos <code class="language-plaintext highlighter-rouge">templates</code> finalizados. As etapas seriam: criação do banco de dados utilizando do ORM <code class="language-plaintext highlighter-rouge">Sequelize</code> servindo o <code class="language-plaintext highlighter-rouge">Postgres</code> e a criação de um layout com a opção de o usuário classificar/comentar os filmes que já assistiu.</p>

<p>Para criar a conexão utilizando o <code class="language-plaintext highlighter-rouge">Sequelize</code>, basta incluir o pacote em uma variável e gerar a conexão da seguinte maneira:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">const</span> <span class="nx">Sequelize</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">sequelize</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">sequelize</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sequelize</span><span class="p">(</span><span class="dl">'</span><span class="s1">flow</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">gnomo</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">123123</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">host</span><span class="p">:</span> <span class="dl">'</span><span class="s1">127.0.0.1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">dialect</span><span class="p">:</span> <span class="dl">'</span><span class="s1">postgres</span><span class="dl">'</span>
<span class="p">})</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">Sequelize</span><span class="p">:</span> <span class="nx">Sequelize</span><span class="p">,</span>
    <span class="na">sequelize</span><span class="p">:</span> <span class="nx">sequelize</span>
<span class="p">};</span>

<span class="nx">sequelize</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">conectado com sucesso!</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">erro</span><span class="p">){</span>
    <span class="nx">catchonsole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Falha ao se conectar! </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">erro</span><span class="p">)</span>
<span class="p">})</span> </code></pre></figure>

<p>o <code class="language-plaintext highlighter-rouge">module.exports</code>, permite a reutilização das variáveis para dar sequência na construção das tabelas e dos relacionamentos no banco de dados (inclusão em arquivos externos).</p>

<p>No meu arquivo principal (<code class="language-plaintext highlighter-rouge">index.js</code>), levantei o front utilizando o <code class="language-plaintext highlighter-rouge">Express</code> e importei todas as rotas e pastas que faziam parte do projeto, também setei a view engine <code class="language-plaintext highlighter-rouge">ejs</code>, como mostra o trecho abaixo.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">route</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/route</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">5000</span>
<span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span> <span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">route</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kd">static</span><span class="p">(</span><span class="dl">'</span><span class="s1">public</span><span class="dl">'</span><span class="p">))</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/css</span><span class="dl">'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kd">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">public/css</span><span class="dl">'</span><span class="p">))</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/img</span><span class="dl">'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kd">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">public/img</span><span class="dl">'</span><span class="p">))</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/uploads</span><span class="dl">'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kd">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">public/uploads</span><span class="dl">'</span><span class="p">))</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/js</span><span class="dl">'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kd">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">public/js</span><span class="dl">'</span><span class="p">))</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">views</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">./views</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">view engine</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">ejs</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">rodando na port http://localhost:5000</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span></code></pre></figure>

<p>Para construção do serviço de avaliação do site, foi utilizado a framework <code class="language-plaintext highlighter-rouge">average-rating</code> para implementar um <code class="language-plaintext highlighter-rouge">star rating</code>, cálculando a média relativa e considerando valores de 0-5 estrelas para o total de votos, abaixo a função no back-end implementando os valores que chegam dos formulários.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">const</span> <span class="p">{</span>	<span class="nx">score</span><span class="p">,</span> <span class="nx">rate</span><span class="p">,</span> <span class="nx">average</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">average-rating</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/commits/:id</span><span class="dl">'</span><span class="p">,</span> <span class="nx">checkAuthentication</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">idfilm</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
	<span class="kd">let</span> <span class="nx">aux</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">erros_commit</span> <span class="o">=</span> <span class="p">[];</span>
	<span class="k">if</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate1</span><span class="p">)</span> <span class="nx">aux</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate1</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate2</span><span class="p">)</span> <span class="nx">aux</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate2</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate3</span><span class="p">)</span> <span class="nx">aux</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate3</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate4</span><span class="p">)</span> <span class="nx">aux</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate4</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate5</span><span class="p">)</span> <span class="nx">aux</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">rate5</span>
	<span class="k">else</span> <span class="nx">aux</span> <span class="o">=</span> <span class="mi">0</span></code></pre></figure>

<p>E também a função que atualiza os valores agora para mostrar aos demais usuários:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/filefilter/:id</span><span class="dl">'</span><span class="p">,</span><span class="nx">checkAuthentication</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">idteste</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
	<span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span>
	<span class="kd">let</span> <span class="nx">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="kd">let</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="kd">let</span> <span class="nx">e</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="nx">Avaliacao</span><span class="p">.</span><span class="nx">findAll</span><span class="p">({</span><span class="na">where</span><span class="p">:</span> <span class="p">{</span><span class="dl">'</span><span class="s1">idFilm</span><span class="dl">'</span><span class="p">:</span> <span class="nx">idteste</span><span class="p">}}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">index</span> <span class="o">&lt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">index</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">nota</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">a</span><span class="o">++</span><span class="p">;</span>
			<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">nota</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="nx">b</span><span class="o">++</span><span class="p">;</span>
			<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">nota</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="nx">c</span><span class="o">++</span><span class="p">;</span>
			<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">nota</span> <span class="o">===</span> <span class="mi">4</span><span class="p">)</span> <span class="nx">d</span><span class="o">++</span><span class="p">;</span>
			<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">nota</span> <span class="o">===</span> <span class="mi">5</span><span class="p">)</span> <span class="nx">e</span><span class="o">++</span><span class="p">;</span>
			<span class="nx">len</span><span class="o">++</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="kd">const</span> <span class="nx">rating</span> <span class="o">=</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">,</span> <span class="nx">e</span><span class="p">];</span>
		<span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">average</span><span class="p">(</span><span class="nx">rating</span><span class="p">);</span> <span class="c1">// --&gt; 4.4</span></code></pre></figure>

<p>Também foi incluído o formulário em <code class="language-plaintext highlighter-rouge">ejs</code> para gerar uma interface amigável ao usuário final, em razão do html gerar conflito com o <code class="language-plaintext highlighter-rouge">markdown</code> do <code class="language-plaintext highlighter-rouge">jekyll</code> (ferramenta que estou utilizando para escrever o portfólio), estarei apenas trazendo imagens que incluem o layout final da caixa de avaliação.</p>

<p>Bueno, alguns templates finais ficaram assim..</p>

<ul>
  <li>Página para novos clientes</li>
</ul>

<p><img src="https://raw.githubusercontent.com/jardeleko/flow/main/printscreen/create.png?token=GHSAT0AAAAAABT2BNMSUGVOX2HXPV6V4Y3UYTE34OQ" style="float:right" /></p>

<ul>
  <li>Página para logar no flow</li>
</ul>

<p><img src="https://raw.githubusercontent.com/jardeleko/flow/main/printscreen/login.png?token=GHSAT0AAAAAABT2BNMT56ZJMKUUNUCH535KYTE37XA" style="float:right" /></p>

<ul>
  <li>Página inicial do site</li>
</ul>

<p><img src="https://raw.githubusercontent.com/jardeleko/flow/main/printscreen/main.png" /></p>

<ul>
  <li>caixa de avaliações e comentários</li>
</ul>

<p><img src="https://raw.githubusercontent.com/jardeleko/flow/main/printscreen/page.png" /></p>

<p>Enfim, embora ter sido um projeto simples em Nodejs, este foi um dos mais agradáveis de estar desenvolvendo.</p>

<p>Outros arquivos deste site estão no meu repositório, acesse no link: <a href="https://github.com/jardeleko/flow">flow filmes</a></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[O projeto consistiu em implementar uma platforma digital que ajudasse na tomada de decisões, na qual o usuário entrava e verifica os filmes das plataformas: Amazon Prime Video, Globo Play e Netflix, cada filme lançado garantia comentários e avaliações dos usuários, similar a uma rede social, que permitisse buscas relacionadas ao interesse de cada um, e assim, havendo uma colaboração entre os usuários que buscassem indicações no site Flow.]]></summary></entry><entry><title type="html">Métricas do clima com Arduino UNO</title><link href="http://localhost:4000/portfolio/arduino-temperature" rel="alternate" type="text/html" title="Métricas do clima com Arduino UNO" /><published>2019-11-28T13:57:00-03:00</published><updated>2019-11-28T13:57:00-03:00</updated><id>http://localhost:4000/portfolio/arduino-temperature</id><content type="html" xml:base="http://localhost:4000/portfolio/arduino-temperature"><![CDATA[<p>Como esse portfólio foi criado prioritáriamente para lançar alguns projetos que eu gosto, não poderia deixar de selecionar um projetinho embarcado, envolvendo <code class="language-plaintext highlighter-rouge">Arduino Uno</code> e uma plaquinha <code class="language-plaintext highlighter-rouge">BME280</code>.</p>

<p>Mas antes, vou tentar explicar as razões de ter implementado esse serviço, vamos lá.</p>

<p>A ideia começou na disciplina de <code class="language-plaintext highlighter-rouge">Iniciação à Prática Científica</code> (IPC) e consistia em temporizar a irrigação de uma lavoura, inclusive, esse serviço já existe a algum tempo, mas fuçar nisso foi gratificante. Enfim, para que fosse possível, uma das etapas do projeto foi a coleta da temperatura/pressão/umidade, até porque, se houvesse umidade suficiente, não seria necessário o pivo, gotejamento ou qualquer outro método de irrigação ser ativado. Após essa coleta, um <code class="language-plaintext highlighter-rouge">protocolo</code> de minha preferência enviaria os dados coletados até um <code class="language-plaintext highlighter-rouge">servidor na nuvem</code>.</p>

<p>No <code class="language-plaintext highlighter-rouge">Arduino</code>, os fios/junpers foram conectados na seguinte ordem:</p>

<table>
  <thead>
    <tr>
      <th>Arduino UNO</th>
      <th>BME 280</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>5V</td>
      <td>VIN</td>
    </tr>
    <tr>
      <td>GND</td>
      <td>GND</td>
    </tr>
    <tr>
      <td>SCL</td>
      <td>SCL</td>
    </tr>
    <tr>
      <td>SDA</td>
      <td>SDA</td>
    </tr>
  </tbody>
</table>

<p>Em seguida, bastava subir o código no UNO, ou assim dizendo, montar a sketch.</p>

<p>Foi implementado um delay de 1000ms, ou seja, intevalos de  um em um segundo, até porque o dispositivo ia ficar operando direto, vide o Arduino consumir pouquíssima energia, o código abaixo apresenta as linhas que determinaram essas funções.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;Wire.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;Adafruit_Sensor.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;Adafruit_BME280.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SEALEVELPRESSURE_HPA (1013.25)
</span>
<span class="n">Adafruit_BME280</span> <span class="n">bme</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>

	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">bme</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mh">0x76</span><span class="p">))</span> <span class="p">{</span>
		<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Could not find a valid BME280 sensor, check wiring!"</span><span class="p">);</span>
		<span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Temperature = "</span><span class="p">);</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">bme</span><span class="p">.</span><span class="n">readTemperature</span><span class="p">());</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"*C"</span><span class="p">);</span>

	<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Pressure = "</span><span class="p">);</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">bme</span><span class="p">.</span><span class="n">readPressure</span><span class="p">()</span> <span class="o">/</span> <span class="mf">100.0</span><span class="n">F</span><span class="p">);</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"hPa"</span><span class="p">);</span>

	<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Approx. Altitude = "</span><span class="p">);</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">bme</span><span class="p">.</span><span class="n">readAltitude</span><span class="p">(</span><span class="n">SEALEVELPRESSURE_HPA</span><span class="p">));</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"m"</span><span class="p">);</span>

	<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Humidity = "</span><span class="p">);</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">bme</span><span class="p">.</span><span class="n">readHumidity</span><span class="p">());</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"%"</span><span class="p">);</span>

	<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>
	<span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>As imagens abaixa ilustram como ficou as plaquinas após a conexão dos fios.</p>

<p><img src="https://raw.githubusercontent.com/jardeleko/Arduino/master/termostato/test/plac_.jpeg?token=GHSAT0AAAAAABT2BNMSRXYQIKWCB74SBYXIYTEWAWQ" width="350" height="300" style="float:left" /></p>

<p><img src="https://raw.githubusercontent.com/jardeleko/Arduino/master/termostato/test/protoboard.jpeg?token=GHSAT0AAAAAABT2BNMT7XK66PO2AMMKCQPOYTEWBAQ" width="400" style="float:right" /></p>

<p>E os dados encontrados durante os testes foram estes:</p>
<center>
<img src="https://raw.githubusercontent.com/jardeleko/Arduino/master/termostato/test/1.png?token=GHSAT0AAAAAABT2BNMTLXNDTAUW6OQV5QCAYTEWAEQ" />
</center>
<p>Enfim, também foi utilizado o Google Cloud Platform para testar os envios e entregas dos dados, porém a pesquisa não foi finalizada, isso pela falta do próprio acesso a sistemas de irrigação complexos.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Como esse portfólio foi criado prioritáriamente para lançar alguns projetos que eu gosto, não poderia deixar de selecionar um projetinho embarcado, envolvendo Arduino Uno e uma plaquinha BME280.]]></summary></entry></feed>